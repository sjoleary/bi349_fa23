[
  {
    "objectID": "10_relational-data.html#composition-of-elasmobranch-communities-compare-across-sites",
    "href": "10_relational-data.html#composition-of-elasmobranch-communities-compare-across-sites",
    "title": "10  Relational data",
    "section": "10.1 Composition of elasmobranch communities compare across sites",
    "text": "10.1 Composition of elasmobranch communities compare across sites\nLet’s start by reading in the data set we will use for this analysis3.3 This is a data set that has been cleaned up to contain only the elasmobranchs caught during the survey since that is the taxonomic group we are interested in\n\nelasmos &lt;- read_delim(\"data/longline_elasmobranchs.txt\", delim = \"\\t\")\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nProduce a table that contains the number of times a species was caught at each site and overall during the long-lining survey and give a brief description of the pattern(s) you see. Briefly, compare the list of species that were caught to the species identified in the longterm TWPD gill net monitoring program.\n\n\n\n\n\n\n\n\n Did it!\n\n\n\n[Your answer here]\n\n\nYour table should look something like this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nAransas_Bay\nCorpus_Christi_Bay\nRedfish_Bay\nTotal\n\n\n\n\nCarcharhinus_brevipinna\n12\n46\n12\n70\n\n\nCarcharhinus_leucas\n3\n4\n1\n8\n\n\nCarcharhinus_limbatus\n1\n1\n0\n2\n\n\nCarcharhinus_porosus\n0\n1\n0\n1\n\n\nHypanus_americanus\n3\n1\n7\n11\n\n\nHypanus_sabina\n9\n2\n0\n11\n\n\nRhinoptera_bonasus\n0\n0\n1\n1\n\n\nRhizoprionodon_terraenovae\n1\n5\n8\n14\n\n\nSphyrna_lewini\n0\n4\n0\n4\n\n\nSphyrna_tiburo\n1\n18\n16\n35\n\n\n\nTable 10.1: Number of individuals per caught per site and overall across all sites and years.\n\n\n\n\n\n\n\n\nProtip\n\n\n\nYou can use replace(is.na(.), 0) to replace NA values in all columns with a 0.\n\n\nWe are not only interested in which species are observed at each site, we also want to know what at what life stages different species are using the estuaries. Typically, we can classify sharks as young-of-the-year (YOY), juveniles (JUV), or mature (MAT). There are ways to observe this in the field, for example YOY can be identified using their umbilical scar and in male sharks whether or not the claspers are calcified is an indication of maturity.\n\n\n\n\n\n\n Give it a whirl\n\n\n\nDetermine how many individuals have information on their life history stage.\n\n\n\n\n\n\n\n\n Did it!\n\n\n\n[Your answer here]\n\n\nAnother way to determine the life history stage is to used previously information on length-at-maturity and how quickly YOY grow during their first year of life. This information is species-specific and has been determined for various species using life-history studies that rely on data sets that contain information on size, level of maturity and age4.4 Sharks can be aged using their vertebrae similar to how we can use growth rings on trees to age them.\nFor example, (Carlson and Baremore 2005) determined the following length/history stage relationships for spinner sharks (C. brevipinna)\n\nCarlson, John K., and Ivy Baremore. 2005. “Growth Dynamics of the Spinner Shark (Carcharhinus Brevipinna) Off the United States Southeast and Gulf of Mexico Coasts: A Comparison of Methods.” Fishery Bulletin 103 (2). https://aquadocs.org/handle/1834/26223.\n\nYOY\n\nfemales &lt; 844mm\nmales &lt; 812mm\n\nJuveniles\n\nfemales 844 - 1360mm\nmales 812 - 1380mm\n\nmature (adults)\n\nfemales &gt; 1360 mm\nmales &gt; 1380 mm\n\n\nWhile (Neer, Thompson, and Carlson 2005) published these details for bull sharks (C. leucas)\n\nNeer, J. A., B. A. Thompson, and John K. Carlson. 2005. “Age and Growth of Carcharhinus Leucas in the Northern Gulf of Mexico: Incorporating Variability in Size at Birth - Neer - 2005 - Journal of Fish Biology - Wiley Online Library.” Journal of Fish Biology 67 (2): 370–83. https://onlinelibrary.wiley.com/doi/full/10.1111/j.0022-1112.2005.00743.x.\n\nYOY\n\nfemales &lt; 700mm\nmales &lt; 700mm\n\nJuveniles\n\nfemales 700 - 2250mm\nmales 700 - 2100mm\n\nmature (adults)\n\nfemales &gt; 2250mm\nmales &gt; 2100mm\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nFirst, conceptually describe how you could add this information to your data sheet in excel as a new column called Estimated_Stage.\n\n\nNow, let’s consider how we could use our data wrangling skills to add a new column Estimated_Stage that contains life history stage based on length estimates. Let’s first work this out for the two species above to keep it simple.\nWhen confronted with a more complex problems like this it can be helpful to first walk through the individual steps necessary5.5 Many people find it helpful to write things out in ‘pseudo-code’ first and then work out what the code needs to look like for the specific language they are working in\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly outline what you think our approach should look like - even if you don’t know the functions you need to achieve this.\n\n\nThere are two approaches we can take.\n\n\n\n\n\n\nSolution 1\n\n\n\n\n\nThe first solution involves sub-setting your data.frame using filter() to contain only individuals that fulfill the conditions of specific length ranges that fit the ranges above for each life history stage and the add a new column with the correctly assigned life history stage6.\n\n# C. brevipinna, Carlson & Baremore 2005\n\nC.brevipinna_YOY &lt;- filter(elasmos, Species==\"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&lt;=812 | Species==\"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&lt;=844 | Species==\"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&lt;=844) %&gt;%\n  mutate(Estimated_Stage=\"YOY\")\n\nC.brevipinna_JUV &lt;- filter(elasmos, Species==\"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&gt;812 & FL&lt;=1380 | Species==\"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&gt;844 & FL&lt;=1360 | Species==\"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&gt;844 & FL&lt;=1360) %&gt;%\n  mutate(Estimated_Stage=\"JUV\")\n\nC.brevipinna_MAT &lt;- filter(elasmos, Species==\"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&gt;1380 | Species==\"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&gt;1360 | Species==\"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&gt;1360) %&gt;%\n  mutate(Estimated_Stage=\"MAT\")\n\n\n# C. leucas, Neer et al. 2005\n\nC.leucas_YOY &lt;- filter(elasmos, Species==\"Carcharhinus_leucas\" & FL&lt;=700) %&gt;%\n  mutate(Estimated_Stage=\"YOY\")\n\nC.leucas_JUV &lt;- filter(elasmos, Species==\"Carcharhinus_leucas\" & Sex==\"M\" & FL&gt;700 & FL&lt;=2100 | Species==\"Carcharhinus_leucas\" & Sex==\"F\" & FL&gt;700 & FL&lt;=2250 | Species==\"Carcharhinus_leucas\" & Sex==\"U\" & FL&gt;700 & FL&lt;=2250) %&gt;%\n  mutate(Estimated_Stage=\"JUV\")\n\nC.leucas_MAT &lt;- filter(elasmos, Species==\"Carcharhinus_leucas\" & Sex==\"M\" & FL&gt;2100 | Species==\"Carcharhinus_leucas\" & Sex==\"F\" & FL&gt;2250 | Species==\"Carcharhinus_leucas\" & Sex==\"U\" & FL&gt;2250) %&gt;%\n  mutate(Estimated_Stage=\"MAT\")\n\nNow you have a bunch of individual data.frames that we need to put back together into a single data.frame. We can do this using bind_rows() which will combine data.frames that have the same set of columns.\n\nelasmos_stage &lt;- bind_rows(C.brevipinna_YOY, C.brevipinna_JUV, C.brevipinna_MAT,\n                           C.leucas_YOY, C.leucas_JUV, C.leucas_MAT)\n\n\n\n\n6 Remember, you can use & and | to combine two conditionsThis solution fits into our general scheme of “split-apply-combine” - except that we actually created multiple objects during our “split” stage. Is there a way to do this without creating individual objects?\n\n\n\n\n\n\nSolution 2\n\n\n\n\n\nIndeed, our second option circumvents having to first create subsets of the initial data.frame using something called a “conditional mutate”.\n\nelasmos_stage &lt;- elasmos %&gt;%\n  filter(Species %in% c(\"Carcharhinus_leucas\", \"Carcharhinus_brevipinna\")) %&gt;%\n  mutate(Estimated_Stage = case_when(Species == \"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&lt;=812 |\n                                       Species == \"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&lt;=844 |\n                                       Species == \"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&lt;=844 ~ \"YOY\",\n         Species==\"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&gt;812 & FL&lt;=1380 |\n           Species==\"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&gt;844 & FL&lt;=1360 |\n           Species==\"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&gt;844 & FL&lt;=1360 ~ \"JUV\",\n         Species==\"Carcharhinus_brevipinna\" & Sex==\"M\" & FL&gt;1380 |\n           Species==\"Carcharhinus_brevipinna\" & Sex==\"F\" & FL&gt;1360 |\n           Species==\"Carcharhinus_brevipinna\" & Sex==\"U\" & FL&gt;1360 ~ \"MAT\",\n         Species==\"Carcharhinus_leucas\" & FL&lt;=700 ~ \"YOY\",\n         Species==\"Carcharhinus_leucas\" & Sex==\"M\" & FL&gt;700 & FL&lt;=2100 | \n           Species==\"Carcharhinus_leucas\" & Sex==\"F\" & FL&gt;700 & FL&lt;=2250 | \n           Species==\"Carcharhinus_leucas\" & Sex==\"U\" & FL&gt;700 & FL&lt;=2250 ~ \"JUV\",\n         Species==\"Carcharhinus_leucas\" & Sex==\"M\" & FL&gt;2100 | \n           Species==\"Carcharhinus_leucas\" & Sex==\"F\" & FL&gt;2250 | \n           Species==\"Carcharhinus_leucas\" & Sex==\"U\" & FL&gt;2250 ~ \"MAT\"))\n\nThis is of course a fairly complicated conditional mutate as we are generally combining multiple conditions per category. In this case we could also leave out the | and instead add a ~ STAGE to each line depending on our coding preferences.\n\n\n\nNormally, we would have to extend our code to estimate life history stage for all of our sampled individuals but I have done this for you and you can load that file from your data folder.\n\nelasmos &lt;- read_delim(\"data/elasmos_complete.txt\", delim = \"\\t\")\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nUse this data set to create a table with the number of individuals per life history stage caught at each site.\n\n\nThis is what you table should look like.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nSite\nTotal\nYOY\nJUV\nMAT\nUND\n\n\n\n\nCarcharhinus_brevipinna\nAransas_Bay\n12\n11\n0\n0\n1\n\n\nCarcharhinus_brevipinna\nCorpus_Christi_Bay\n46\n45\n0\n0\n1\n\n\nCarcharhinus_brevipinna\nRedfish_Bay\n12\n8\n3\n0\n1\n\n\nCarcharhinus_leucas\nAransas_Bay\n3\n0\n3\n0\n0\n\n\nCarcharhinus_leucas\nCorpus_Christi_Bay\n4\n4\n0\n0\n0\n\n\nCarcharhinus_leucas\nRedfish_Bay\n1\n0\n1\n0\n0\n\n\nCarcharhinus_limbatus\nAransas_Bay\n1\n0\n1\n0\n0\n\n\nCarcharhinus_limbatus\nCorpus_Christi_Bay\n1\n1\n0\n0\n0\n\n\nCarcharhinus_porosus\nCorpus_Christi_Bay\n1\n0\n1\n0\n0\n\n\nHypanus_americanus\nAransas_Bay\n3\n0\n0\n3\n0\n\n\nHypanus_americanus\nCorpus_Christi_Bay\n1\n0\n0\n1\n0\n\n\nHypanus_americanus\nRedfish_Bay\n7\n0\n3\n4\n0\n\n\nHypanus_sabina\nAransas_Bay\n9\n0\n0\n9\n0\n\n\nHypanus_sabina\nCorpus_Christi_Bay\n2\n0\n0\n2\n0\n\n\nRhinoptera_bonasus\nRedfish_Bay\n1\n0\n0\n1\n0\n\n\nRhizoprionodon_terraenovae\nAransas_Bay\n1\n1\n0\n0\n0\n\n\nRhizoprionodon_terraenovae\nCorpus_Christi_Bay\n5\n5\n0\n0\n0\n\n\nRhizoprionodon_terraenovae\nRedfish_Bay\n8\n8\n0\n0\n0\n\n\nSphyrna_lewini\nCorpus_Christi_Bay\n4\n1\n3\n0\n0\n\n\nSphyrna_tiburo\nAransas_Bay\n1\n0\n1\n0\n0\n\n\nSphyrna_tiburo\nCorpus_Christi_Bay\n18\n0\n14\n3\n1\n\n\nSphyrna_tiburo\nRedfish_Bay\n16\n1\n9\n6\n0\n\n\n\nTable 10.2: Number of individuals per species caught at each site by life history stage.\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly describe your results to compare total catch across sites accounting for differences in life history stage.\n\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nSubset your data to contain only YOY and generate a table to investigate whether they were caught across all years sampling occured. Summarize your results in 2-3 sentences.\n\n\nThis is what your table should look like:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSite\nSpecies\n2015\n2016\n2017\n2018\n\n\n\n\nAransas_Bay\nCarcharhinus_brevipinna\n7\n0\n3\n1\n\n\nAransas_Bay\nRhizoprionodon_terraenovae\n0\n0\n1\n0\n\n\nCorpus_Christi_Bay\nCarcharhinus_brevipinna\n0\n6\n16\n23\n\n\nCorpus_Christi_Bay\nCarcharhinus_leucas\n1\n3\n0\n0\n\n\nCorpus_Christi_Bay\nCarcharhinus_limbatus\n0\n1\n0\n0\n\n\nCorpus_Christi_Bay\nRhizoprionodon_terraenovae\n0\n3\n1\n1\n\n\nCorpus_Christi_Bay\nSphyrna_lewini\n0\n0\n1\n0\n\n\nRedfish_Bay\nCarcharhinus_brevipinna\n1\n0\n3\n4\n\n\nRedfish_Bay\nRhizoprionodon_terraenovae\n4\n4\n0\n0\n\n\nRedfish_Bay\nSphyrna_tiburo\n1\n0\n0\n0\n\n\n\nTable 10.3: Number of YOY caught at each site in each sampling year."
  },
  {
    "objectID": "10_relational-data.html#comparison-of-cpue-per-species-across-sites",
    "href": "10_relational-data.html#comparison-of-cpue-per-species-across-sites",
    "title": "10  Relational data",
    "section": "10.2 Comparison of CPUE per species across sites",
    "text": "10.2 Comparison of CPUE per species across sites\n\n\n\n\n\n\n Consider this\n\n\n\nConsider disadvantages of using absolute counts of occurrence to compare composition across sites. What measure could you use instead of total catch to fix this issue?\n\n\nCatch-per-unit-effort (CPUE) is an indirect measure of abundance. Essentially, it is a way to measure relative abundance and be able to account for differences in sampling effort - the key is defining how you will measure “effort”.\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly discuss what measures we could use to determine effort.\n\n\nWe are going to calculate effort as “hook hours”.\nTo do this we need to know how many hooks were on the line per set7 and how long the entire line was in the water per set (this is called soak time), then we can easily calculate hook hours of each set as the number of hooks multiplied by the soak time. And then we can divide the number of e.g. sharks caught on a set (“catch) by hook hours (”effort”) to calculate CPUE.7 A set means that baited hooks on leaders (individual lines) where attached to the main line and that main line was then “set” in the water for a given period of time before pulling it back in and determining which fish were caught on hooks.\nYour data folder contains as tab-delimited file with set meta-data. This includes information that describes the set itself including date of the set, site, soak time, and location and also parameters describing the conditions of the set such as temperature, salinity, depth, and dissolved oxygen.\nLet’s read in the data set.\n\nset_meta &lt;- read_delim(\"data/set_data.txt\", delim = \"\\t\")\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nTake a quick look at the data set to determine what columns are included and what information we can learn about each individual set. How can you amend the data set to include hook hours?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nCorrect, a simple mutate() will do the trick.\n\nset_meta &lt;- set_meta %&gt;%\n  mutate(Hook_Hours = Hooks * Soak_Time)\n\n\n\n\nNext we need to count the number of sharks caught per set.\n\n\n\n\n\n\n Give it a whirl\n\n\n\nIf we look at our elasmo data.frame you will notice that we have a column called Set but that number indicates the nth set of a give sample day. How can you add a column called Set_ID that consists of the date and the set number?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nelasmos &lt;- elasmos %&gt;%\n  unite(Set_ID, Year, Month, Day, Set, sep = \"_\", remove = FALSE) %&gt;%\n  arrange(Set_ID)\n\n\n\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nNow create a new object called elasmos_set that contains the number of sharks caught per set.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nelasmos_set &lt;- elasmos %&gt;%\n  count(Set_ID)\n\n\n\n\nNow we have two data.frames one contains the information on how many sharks were caught per set and a second one that contains information about the set, including hook hours. This means that our next step will need to be to combine these two data sets.\n\n\n\n\n\n\n Consider this\n\n\n\nEarlier we learned about bind_rows() which allows us to combine two data.frames that contain identical columns, i.e. row-wise. There is an equivalent function called bind_columns() which allows us to combine data.frames column-wise.\nConsider what the problem would be in using bind_columns() to combine these two data sets.\n\n\nHaving multiple tables containing data pertaining to the same question is referred to as relational data - we are interested in how the contents of a pair of table related to each other, not just the individual data sets. Combining two tables is called a join. In this case the type of join we want to execute is called a mutating join which means we can add new variables from one data.frame (set_meta) to matching observations in another (elasmos_set).\nIn order to do that we need to have one column (the key) that way the function can match observations in one data.frame by that key and then copy the matching observations in the columns from the second data.frame across.\nWhen performing a join, new columns are added to the right. We will use the function full_join() which means that all the rows from the left and right data.frame will be retained - when we used count() that excluded sets where no sharks were caught, by using a full_join() we can add those back in.\nWe currently do not have a matching column between the two data sets, so our first step will be to add a new column called Set_ID to our set_meta data.frame, then we can use full_join() to join the two tables. The argument by can be used to specify the column to use as the key. For our example here we have a column with the same name - in general, the function is “smart” enough to identify shared columns and so you do not necessarily have to specify it.\n\n\nYou can pull up the help page using ?full_join to learn how to join tables that have multiple columns in common or that might have a column in common though it is named differently between the two tables.\nNote the notation elasmo_set &lt;- full_join(elasmos_set, set_meta, by = \"Set_ID\") will produce the same result as the syntax we are using here.\n\n# add set id column\nset_meta &lt;- set_meta %&gt;%\n  unite(Set_ID, Year, Month, Day, Set, sep = \"_\", remove = FALSE)\n\n# join data sets\nelasmos_set &lt;- elasmos_set %&gt;%\n  full_join(set_meta) %&gt;%\n  replace_na(list(n = 0))\n\nNow we can calculate CPUE for sharks per site.\n\nelasmos_set &lt;- elasmos_set %&gt;%\n  mutate(CPUE = n/Hook_Hours)\n\nAnd from that we can easily calculate mean and standard deviation CPUE of catching sharks by site.\n\n\n\n\n\n\n\nSite\nmean_CPUE\nstd_CPUE\n\n\n\n\nAransas_Bay\n0.0048954\n0.0089735\n\n\nCorpus_Christi_Bay\n0.0135243\n0.0185803\n\n\nRedfish_Bay\n0.0069282\n0.0114742\n\n\n\nTable 10.4: mean +/- sd CPUE\n\n\nWe are going to perform a Kruskal-Wallis rank sum test to determine if there is significant heterogeneity among sites8.8 You are probably more familiar with the framework of using an ANOVA to test for significant heterogeneity and pairwise t-tests to test for equality of means of a set of values. KW is similar but is a non-parametric approach and does not make assumptions about the distribution of values.\n\n# KW to test for significant heterogeneity\nkruskal.test(CPUE ~ Site, data = elasmos_set)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  CPUE by Site\nKruskal-Wallis chi-squared = 12.325, df = 2, p-value = 0.002106\n\n\nAnd we will follow that using a Dunn’s test for pairwise comparisons.\n\n# post-hoc Dunn test\ndunnTest(CPUE ~ Site, data = elasmos_set, method = \"bh\")\n\n                        Comparison          Z      P.unadj       P.adj\n1 Aransas_Bay - Corpus_Christi_Bay -3.3553910 0.0007925288 0.002377586\n2        Aransas_Bay - Redfish_Bay -0.7980727 0.4248282807 0.424828281\n3 Corpus_Christi_Bay - Redfish_Bay  2.5669868 0.0102586520 0.015387978\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly describe your results and discuss what this result could mean for our overarching question of identifying shark nurseries.\n\n\nOf course, we are interested how CPUE compares across species and sites.\n\n\n\n\n\n\n Give it a whirl\n\n\n\nChoose one species and calculate the CPUE per set. For convenience convert CPUE to effort per 1000 hook hours and then calculate the mean CPUE per 1000 hooks per site for that species.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis is what that could look like for a single species.\n\nspecies &lt;- \"Carcharhinus_brevipinna\"\n\nspecies_CPUE &lt;- elasmos %&gt;%\n  filter(Species == species) %&gt;%\n  count(Set_ID) %&gt;%\n  full_join(set_meta) %&gt;%\n  replace_na(list(n = 0)) %&gt;%\n  mutate(CPUE = n/Hook_Hours,\n         CPUE_1000 = CPUE * 1000) %&gt;%\n  group_by(Site) %&gt;%\n  summarize(mean_CPUE = mean(CPUE_1000))\n\n\n\n\nFor better presentation, we probably want to convert that do a wider data set; your results should look like this.\n\n\n\n\n\n\nAransas_Bay\nCorpus_Christi_Bay\nRedfish_Bay\n\n\n\n\n1.91\n7.88\n1.76\n\n\n\nCatch per unit effort (1000 hook hours) for each site.\n\nWe actually want to have this information for all species, rather than create individual data.frames for each species and then combine those using bind_rows(), I will show you a more efficient way of coding this using a for loop.\n\n# create empty list\nspecies_CPUE &lt;- list()\n\n# calculate hook hours for each species per site\nfor(species in unique(elasmos$Species)){\n  \n  species_CPUE[[species]] &lt;- elasmos %&gt;%\n    filter(Species == species) %&gt;%\n    count(Set_ID) %&gt;%\n    full_join(set_meta) %&gt;%\n    replace_na(list(n = 0)) %&gt;%\n    mutate(CPUE = n/Hook_Hours,\n           CPUE_1000 = CPUE * 1000)\n\n}\n\n# combine data frames in list into single \nCPUE &lt;- bind_rows(species_CPUE, .id = \"Species\")\n\nNext, we would want to run KW tests to determine if there are significant differences among sites for each species.\n\n# create empty dataframe for results\nresults &lt;- setNames(data.frame(matrix(ncol = 2, nrow = 0)), \n                    c(\"Species\", \"pvalue\")) %&gt;%\n  mutate(Species = as.character(Species),\n         pvalue = as.numeric(pvalue))\n\nfor(species in unique(CPUE$Species)){\n  \n  # filter CPUE per species\n  tmp &lt;- CPUE %&gt;%\n    filter(Species == species)\n  \n  # KW to test for significant heterogeneity\n  KW &lt;- kruskal.test(CPUE ~ Site, data = tmp)\n  \n  # extract p-value\n  df &lt;- data.frame(\"Species\" = species,\n                   \"pvalue\" = as.numeric(KW$p.value))\n  \n  results &lt;- bind_rows(results, df)\n\n}\n\nLet’s calculate mean CPUE per species and site, turn that into a wide table for easier comparison and add the p-values.\n\nCPUE_sign &lt;- CPUE %&gt;%\n    group_by(Species, Site) %&gt;%\n    summarize(mean_CPUE = mean(CPUE_1000)) %&gt;%\n    pivot_wider(names_from = Site, values_from = mean_CPUE) %&gt;%\n    left_join(results) %&gt;%\n    arrange(Species)\n\nOnce we’ve run that code to wrangle and transform our data we can compare CPUE for each species and site.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nAransas_Bay\nCorpus_Christi_Bay\nRedfish_Bay\npvalue\n\n\n\n\nCarcharhinus_brevipinna\n1.91\n7.88\n1.76\n0.00\n\n\nCarcharhinus_leucas\n0.49\n0.52\n0.14\n0.54\n\n\nCarcharhinus_limbatus\n0.14\n0.18\n0.00\n0.60\n\n\nCarcharhinus_porosus\n0.00\n0.15\n0.00\n0.37\n\n\nHypanus_americanus\n0.49\n0.14\n1.08\n0.25\n\n\nHypanus_sabina\n1.50\n0.29\n0.00\n0.00\n\n\nRhinoptera_bonasus\n0.00\n0.00\n0.16\n0.37\n\n\nRhizoprionodon_terraenovae\n0.14\n0.90\n1.29\n0.22\n\n\nSphyrna_lewini\n0.00\n0.50\n0.00\n0.02\n\n\nSphyrna_tiburo\n0.22\n2.96\n2.49\n0.00\n\n\n\nTable 10.5: Catch per unit effort (per 1000 hook hours) for each species by site, p-value indicates whether there are significant differences among sites for a given species.\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nUse the table with CPUE per species in your lab manual to briefly describe the results comparing CPUE per species and site and relate that to our overarching question of identifying shark nurseries9.\n\n\n9 Normally, we would want to run additional pairwise tests for each species where there are significant differences among sites, but we’ll skip that step for now and stick to the big picture."
  },
  {
    "objectID": "10_relational-data.html#comparison-of-cpue-for-different-life-history-stages",
    "href": "10_relational-data.html#comparison-of-cpue-for-different-life-history-stages",
    "title": "10  Relational data",
    "section": "10.3 Comparison of CPUE for different life history stages",
    "text": "10.3 Comparison of CPUE for different life history stages\nOf course, we are not only interested in which species were caught at each site, we also want to know what life history stages those individuals were at when they were caught.\nWe will use a similar strategy as above to create a data frame with CPUE per site, species, and life history stage and produce a table comparing the means.\n\n# create empty list\nspecies_CPUE &lt;- list()\n\n# calculate hook hours for each species per site\nfor(species in unique(elasmos$Species)){\n  \n  for(stage in unique(elasmos$Estimated_Stage)){\n    \n      species_CPUE[[paste(species, stage, sep = \":\")]] &lt;- elasmos %&gt;%\n        filter(Species == species & Estimated_Stage == stage) %&gt;%\n        count(Set_ID) %&gt;%\n        full_join(set_meta) %&gt;%\n        replace_na(list(n = 0)) %&gt;%\n        mutate(Estimate_Stage = stage, \n               CPUE = n/Hook_Hours,\n               CPUE_1000 = CPUE * 1000)\n\n  }\n  \n}\n\n# combine data frames in list into single \nCPUE &lt;- bind_rows(species_CPUE, .id = \"Species_Stage\") %&gt;%\n  select(Species_Stage, Set_ID, Site, Hooks, Soak_Time, Hook_Hours, CPUE, CPUE_1000) %&gt;%\n  separate(Species_Stage, into = c(\"Species\", \"Stage\"), sep = \":\", remove = FALSE) %&gt;%\n    group_by(Species_Stage, Site) %&gt;%\n    summarize(mean_CPUE = mean(CPUE_1000)) %&gt;%\n    pivot_wider(names_from = Site, values_from = mean_CPUE) %&gt;%\n    filter(if_any(c(Aransas_Bay, Corpus_Christi_Bay, Redfish_Bay), ~ . &gt; 0)) %&gt;%\n    separate(Species_Stage, into = c(\"Species\", \"Stage\"), sep = \":\") %&gt;%\n    filter(!Stage == \"UND\")\n\nThis will produce the following table summarizing the results.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nStage\nAransas_Bay\nCorpus_Christi_Bay\nRedfish_Bay\n\n\n\n\nCarcharhinus_brevipinna\nJUV\n0.0000\n0.0000\n0.4586\n\n\nCarcharhinus_brevipinna\nYOY\n1.7477\n7.7283\n1.1510\n\n\nCarcharhinus_leucas\nJUV\n0.4940\n0.0000\n0.1357\n\n\nCarcharhinus_leucas\nYOY\n0.0000\n0.5209\n0.0000\n\n\nCarcharhinus_limbatus\nJUV\n0.1443\n0.0000\n0.0000\n\n\nCarcharhinus_limbatus\nYOY\n0.0000\n0.1794\n0.0000\n\n\nCarcharhinus_porosus\nJUV\n0.0000\n0.1480\n0.0000\n\n\nHypanus_americanus\nJUV\n0.0000\n0.0000\n0.4745\n\n\nHypanus_americanus\nMAT\n0.4872\n0.1444\n0.6095\n\n\nHypanus_sabina\nMAT\n1.4967\n0.2940\n0.0000\n\n\nRhinoptera_bonasus\nMAT\n0.0000\n0.0000\n0.1614\n\n\nRhizoprionodon_terraenovae\nYOY\n0.1443\n0.8970\n1.2884\n\n\nSphyrna_lewini\nJUV\n0.0000\n0.3768\n0.0000\n\n\nSphyrna_lewini\nYOY\n0.0000\n0.1210\n0.0000\n\n\nSphyrna_tiburo\nJUV\n0.2217\n2.3098\n1.4763\n\n\nSphyrna_tiburo\nMAT\n0.0000\n0.4455\n0.8716\n\n\nSphyrna_tiburo\nYOY\n0.0000\n0.0000\n0.1468\n\n\n\nTable 10.6: Comparison of CPUE by life history stage for all observed life history stages in Aransas, Corpus Christi, and Redfish Bay.\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly describe the results comparing CPUE per life history stage and site; these results are all statistically significant.\n\n\n\n\n\n\n\n\n Consider this\n\n\n\nRelate your all of our results back to the overarching question of identifying shark nurseries in Texas Bays and Estuaries to write a short conclusion in terms of what this study has (or has not demonstrated)."
  },
  {
    "objectID": "z_references.html",
    "href": "z_references.html",
    "title": "References",
    "section": "",
    "text": "Carlson, John K., and Ivy Baremore. 2005. “Growth Dynamics of the\nSpinner Shark (Carcharhinus Brevipinna) Off the\nUnited States Southeast and Gulf of\nMexico Coasts: A Comparison of Methods.” Fishery\nBulletin 103 (2). https://aquadocs.org/handle/1834/26223.\n\n\nHeupel, Michelle R., John K. Carlson, and Colin A. Simpfendorfer. 2007.\n“Shark Nursery Areas: Concepts, Definition, Characterization and\nAssumptions.” Marine Ecology Progress Series 337 (May):\n287–97. https://doi.org/10.3354/meps337287.\n\n\nHeupel, Michelle R., Shiori Kanno, Ana P. B. Martins, Colin A.\nSimpfendorfer, Michelle R. Heupel, Shiori Kanno, Ana P. B. Martins, and\nColin A. Simpfendorfer. 2018. “Advances in Understanding the Roles\nand Benefits of Nursery Areas for Elasmobranch Populations.”\nMarine and Freshwater Research 70 (7): 897–907. https://doi.org/10.1071/MF18081.\n\n\nNeer, J. A., B. A. Thompson, and John K. Carlson. 2005. “Age and\nGrowth of Carcharhinus Leucas in the Northern\nGulf of Mexico: Incorporating Variability in\nSize at Birth - Neer - 2005 - Journal of\nFish Biology - Wiley Online Library.”\nJournal of Fish Biology 67 (2): 370–83. https://onlinelibrary.wiley.com/doi/full/10.1111/j.0022-1112.2005.00743.x.\n\n\nPlumlee, Jeffrey D., Kaylan M. Dance, Philip Matich, John A. Mohan,\nTravis M. Richards, Thomas C. TinHan, Mark R. Fisher, and R. J. David\nWells. 2018. “Community Structure of Elasmobranchs in Estuaries\nAlong the Northwest Gulf of Mexico.”\nEstuarine, Coastal and Shelf Science 204 (May): 103–13. https://doi.org/10.1016/j.ecss.2018.02.023.\n\n\nSwift, Dominic G., and David S. Portnoy. 2021. “Identification and\nDelineation of Essential Habitat for\nElasmobranchs in Estuaries on the Texas\nCoast.” Estuaries and Coasts 44 (3): 788–800. https://doi.org/10.1007/s12237-020-00797-y."
  },
  {
    "objectID": "09_tidy-data.html#producing-tidy-data-sets",
    "href": "09_tidy-data.html#producing-tidy-data-sets",
    "title": "9  Tidy data",
    "section": "9.1 Producing tidy data sets",
    "text": "9.1 Producing tidy data sets\nThe last set of functions that we need to get comfortable with allow us to create tidy data sets.\n\n\n\n\n\n\n Consider this\n\n\n\nList the three characteristics of a tidy data set. Explain why a tidy data set is sometimes also describe as a long data set.\n\n\nLet’s read out data set back into our R session.\n\n# read catch data\ncatch &lt;- read_delim(\"data/longline_catchdata.txt\", delim = \"\\t\")\n\n\n\n\n\n\n\n Consider this\n\n\n\nTake a look at our data set and argue whether or not it is a tidy data set. The easiest way to do this is to determine if it fullfills all the characteristics.\n\n\nLet’s quickly reformat our catch data as follows\n\ncatch_length &lt;- catch %&gt;%\n  unite(SetID, Year, Month, Day, Set, sep = \"_\") %&gt;%\n  select(SetID, Site, Species, Sex, PCL, FL, STL)\n\nhead(catch_length)\n\n# A tibble: 6 × 7\n  SetID       Site        Species       Sex     PCL    FL   STL\n  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   287   353\n2 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   425   495\n3 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   416   502\n4 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   416   507\n5 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   418   510\n6 2015_7_28_1 Aransas_Bay Bagre_marinus U        NA   434   515\n\n\nWe can turn this into a tidy data set using pivot_longer(). To do this we have to identify columns that will be used as the key (cols =) and then name the column that will hold those values (names_to()) and the column that will hold the value (values_to()).\nIn this case, we have made three observations about length for each specimen, in order to have rows with unique observations we want a column that identifies what type of observation was made, for example called Measurement. This is called the “key” because it allows us to “unlock” what type of measurement the individual observation is, i.e. this column will let us know whether an observation (row) is pre-caudal length, fork length, or stretch total length.\nWe will designate another column Length to hold the values for each measurement.\nWe can identify the columns that need to be gathered either by name or since we have re-arranged our dataframe so they are the last columns by column number.\n\ntidy_length &lt;- catch_length %&gt;%\n  pivot_longer(names_to = \"Measurement\", values_to = \"Length\", cols = 5:7)\n\n\n\n\n\n\n\n Consider this\n\n\n\nBriefly outline advantages to using tidy data sets.\n\n\nWith this data set it would be straightforward for us to e.g. calculate mean values for each length measurement by species using group_by() and summarize().\n\ntidy_length %&gt;%\n  group_by(Species, Measurement) %&gt;%\n  summarize(mean = mean(Length, na.rm = TRUE))\n\n# A tibble: 42 × 3\n# Groups:   Species [14]\n   Species                 Measurement  mean\n   &lt;chr&gt;                   &lt;chr&gt;       &lt;dbl&gt;\n 1 Bagre_marinus           FL           433.\n 2 Bagre_marinus           PCL          NaN \n 3 Bagre_marinus           STL          517.\n 4 Carcharhinus_brevipinna FL           644.\n 5 Carcharhinus_brevipinna PCL          583.\n 6 Carcharhinus_brevipinna STL          804.\n 7 Carcharhinus_leucas     FL           769 \n 8 Carcharhinus_leucas     PCL          691.\n 9 Carcharhinus_leucas     STL          936.\n10 Carcharhinus_limbatus   FL           613.\n# ℹ 32 more rows"
  },
  {
    "objectID": "09_tidy-data.html#convert-a-tidy-data-set-to-wide-format",
    "href": "09_tidy-data.html#convert-a-tidy-data-set-to-wide-format",
    "title": "9  Tidy data",
    "section": "9.2 Convert a tidy data set to wide format",
    "text": "9.2 Convert a tidy data set to wide format\nDespite all the advantages of tidy data sets you can see from the table above that frequently when we are presenting results in a table it may be advantageous in terms of layout to have a non-tidy format.\nThis can be done using pivot_wider() which works like pivot_longer() but in reverse. You designate which column is the key (names_from =), i.e. these will become the column names in the new table. Then you need to identify which column in your current data frame contains the values that should be filled out/spread into the columns that will be generated from your key (values_from =).\nSince we don’t have values for precaudal length, we probably want to use filter() to remove those rows first.\n\n\nMore notes on naming things … recall, that we said that filenames should not contain spaces or special characters? We set similar rules for naming objects. Well, column names is a similar conundrum. Including spaces or species characters as a column name creates problems when we are using functions like select() to subset by column name or mutate() to create new columns based on exisiting columns. Similarly, if the column name is a number you will have problems. If you do have unconvential column names you can rename them using rename() or you can use backticks and either side of the name to indicate that it is a column name.\n\ntidy_length %&gt;%\n  filter(!Measurement == \"PCL\") %&gt;%\n  group_by(Species, Measurement) %&gt;%\n  summarize(mean = mean(Length, na.rm = TRUE)) %&gt;%\n  pivot_wider(names_from = \"Measurement\", values_from = \"mean\")\n\n# A tibble: 14 × 3\n# Groups:   Species [14]\n   Species                       FL   STL\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;dbl&gt;\n 1 Bagre_marinus               433.  517.\n 2 Carcharhinus_brevipinna     644.  804.\n 3 Carcharhinus_leucas         769   936.\n 4 Carcharhinus_limbatus       613.  776.\n 5 Carcharhinus_porosus        415   475 \n 6 Hypanus_americanus          NaN   954.\n 7 Hypanus_sabina              NaN   349.\n 8 Rhinoptera_bonasus          NaN   819 \n 9 Rhizoprionodon_terraenovae  412   510.\n10 Sciades_felis               299.  343.\n11 Sciaenops_ocellatus         793   932.\n12 Sphyrna_lewini              471.  628 \n13 Sphyrna_tiburo              622.  792.\n14 Synodus_foetens             173   185 \n\n\n\n\n\n\n\n\n Give it a whirl\n\n\n\nCalculate the number of individuals per species caught per month in 2018 and present that data in a wide formate to make it easy to compare the number of species (species) per month (columns). As a bonus create an additional column with total catch of that species for 2018."
  }
]