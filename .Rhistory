panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# modeling
library(corrplot)
library(GGally)
# set other options ----
# scientific notation
options(scipen=999)
# turn off messages and warnings
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# set the ggplot theme for the document
theme_set(theme_bw())
pm <- read_delim("data/air_pollution.csv", delim = ",") %>%
clean_names()
pm %>%
glimpse()
pm <- pm %>%
mutate(across(c(id, fips, zcta), as.factor))
#| label: tbl
#| tbl-cap: "Data summary feature data set for air pollution monitoring."
skim(pm)
#| label: tbl-states
#| tbl-cap: "States with available data."
#| tbl-cap-location: top
#| echo: false
pm %>%
distinct(state) %>%
kable()
#| label: tbl-cities-monitors
#| tbl-cap: "Number of air monitors located in each city compared to rural areas."
#| tbl-cap-location: top
#| echo: false
pm %>%
group_by(city) %>%
count() %>%
ungroup() %>%
slice_max(n = 15, order_by = n) %>%
arrange(desc(n), city) %>%
kable()
#| label: fig-corrplot-1
#| fig-cap: "Pairwise comparison of correlation coefficients for all continuous variables."
#| fig-height: 9
#| fig-width: 9
# calculate Pearson's coefficients
PM_cor <- pm %>%
select_if(is.numeric) %>%
cor()
# plot pairwise correlation matrix
corrplot(PM_cor, tl.cex = 0.5)
#| label: fig-corrplot-2
#| fig-cap: "Pairwise comparison of correlation coefficients for all continuous variables. Size and color intensity of circles represent the strength of these relationships."
#| fig-height: 10
#| fig-width: 10
corrplot(abs(PM_cor),
order = "hclust",
tl.cex = 0.5,
col.lim = c(0, 1))
#| label: fig-corr-impervious-1
#| fig-cap: "Pairwise comparison of correlation coefficients for all variables related to levels of development, i.e. level of surface imperviousness."
# plot pairwise
pm %>%
select(contains("imp")) %>%
ggcorr(label = TRUE)
#| label: fig-corr-impervious-2
#| fig-cap: "Scatterplots describing the relationships between all combinations of values describing level of development for buffers surrounding each air pollution monitor (below the diagonal) and corresponding Pearson's correlation coefficients (above the diagonal), the distribution of values for each variable is on the diagonal."
#| fig-height: 9
#| fig-width: 9
# plot scatter plots, density plots & correlation coefficients
pm %>%
select(contains("imp")) %>%
ggpairs()
#| label: fig-corr-roads
#| fig-cap: "Scatterplots describing the relationships between all combinations of values describing road density for buffers surrounding each air pollution monitor  (below the diagonal) and corresponding Pearson's correlation coefficients (above the diagonal), the distribution of values for each variable is on the diagonal."
#| fig-height: 9
#| fig-width: 9
pm %>%
select(contains("pri")) %>%
ggpairs()
#| label: fig-corr-emissions
#| fig-cap: "Scatterplots describing the relationships between all combinations of variables measuring air pollution for buffers surrounding each air pollution monitor (below the diagonal) and corresponding Pearson's correlation coefficients (above the diagonal), the distribution of values for each variable is on the diagonal."
#| fig-height: 9
#| fig-width: 9
pm %>%
select(contains("nei")) %>%
ggpairs()
#| label: fig-corr-pop-density-1
#| fig-cap: "Scatterplots describing the relationships between range of variables describing development, road density, emission levels, and population density for buffers surrounding each air pollution monitor (below the diagonal) and corresponding Pearson's correlation coefficients (above the diagonal), the distribution of values for each variable is on the diagonal."
#| fig-height: 9
#| fig-width: 9
pm %>%
select(log_nei_2008_pm25_sum_10000, popdens_county,
log_pri_length_10000, imp_a10000, county_pop) %>%
ggpairs()
#| label: fig-corr-log-transform
#| fig-cap: "Scatterplots describing the relationships between range of variables describing development, road density, emission levels, and population density for buffers surrounding each air pollution monitor (below the diagonal) and corresponding Pearson's correlation coefficients (above the diagonal), the distribution of values for each variable is on the diagonal."
#| fig-height: 9
#| fig-width: 9
pm %>%
mutate(log_popdens_county = log(popdens_county)) %>%
mutate(log_pop_county = log(county_pop)) %>%
select(log_nei_2008_pm25_sum_10000, log_popdens_county,
log_pri_length_10000, imp_a10000, log_pop_county) %>%
ggpairs()
pm <- pm %>%
mutate(city = case_when(city == "Not in a city" ~ "Not in a city",
city != "Not in a city" ~ "In a city"))
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# modeling
library(tidymodels)
library(vip)
# set other options ----
# scientific notation
options(scipen=999)
# turn off messages and warnings
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# set the ggplot theme for the document
theme_set(theme_bw())
# set random seed
set.seed(42)
# read & wrangle data set
pm <- read_delim("data/air_pollution.csv", delim = ",") %>%
clean_names() %>%
mutate(across(c(id, fips, zcta), as.factor)) %>%
mutate(city = case_when(city == "Not in a city" ~ "Not in a city",
city != "Not in a city" ~ "In a city"))
# split sample
pm_split <- rsample::initial_split(data = pm, prop = 2/3)
# check proportions of split
pm_split
# training data set
train_pm <- training(pm_split)
# test data set
test_pm <- testing(pm_split)
# build recipe
simple_rec <-recipe(train_pm) %>%
update_role(everything(), new_role = "predictor")%>%  # specify predictor variables
update_role(value, new_role = "outcome")%>%           # specify outcome variable
update_role(id, new_role = "id variable")             # specify id as id variable
simple_rec
#| label: tbl-recipe
#| tbl-cap: "Roles assigned to each feature in the data set."
summary(simple_rec) %>%
kable()
simple_rec %>%
step_dummy(state, country, city, zcta, one_hot = TRUE)
simple_rec %>%
update_role("fips", new_role = "county id")
simple_rec %>%
step_corr(all_predictors(), - CMAQ, - aod)
simple_rec %>%
step_nzv(all_predictors(), - CMAQ, - aod)
# create final recipe
simple_rec <- recipe(train_pm) %>%
update_role(everything(), new_role = "predictor") %>%
update_role(value, new_role = "outcome") %>%
update_role(id, new_role = "id variable") %>%
update_role("fips", new_role = "county id") %>%
step_dummy(state, county, city, zcta, one_hot = TRUE) %>%
step_corr(all_numeric()) %>%
step_nzv(all_numeric())
simple_rec
# update recipe with training data, retain training data set
prepped_rec <- prep(simple_rec, verbose = TRUE,
retain = TRUE)
names(prepped_rec)
# extract training data set
baked_train <- bake(prepped_rec, new_data = NULL)
# overview
glimpse(baked_train)
glimpse(pm)
# extract test data set
baked_test_pm <- bake(prepped_rec, new_data = test_pm)
# compare effect
glimpse(baked_test_pm)
lm_PM <- linear_reg() # specify model type
lm_PM <- linear_reg() %>% # specify model type
set_engine("lm")        # set engine
lm_PM <- linear_reg() %>% # specify model type
set_engine("lm") %>%    # set engine
set_mode("regression")  # set mode
PM_wflow <-workflows::workflow() %>%
workflows::add_recipe(simple_rec) %>%
workflows::add_model(lm_PM)
PM_wflow
PM_wflow_fit <- fit(PM_wflow, data = train_pm)
#| label: tbl-fit-summary
#| tbl-cap: "Overview of effect of individual predictor variables on the model."
wflowoutput <- PM_wflow_fit %>%
pull_workflow_fit() %>%
broom::tidy()
wflowoutput %>%
kable()
#| label: fig-variables-impact
#| fig-cap: "Top 10 variables with strongest impact on the model."
# pull top 10 most important variables
PM_wflow_fit %>%
pull_workflow_fit() %>%
vip(num_features = 10)
fit_PM <- PM_wflow_fit %>%
pull_workflow_fit()
fit_PM <- augment(fit_PM$fit, data = baked_train) %>%
select(value, .fitted:.std.resid)
fit_PM
#| label: fig-obs-fitted
#| fig-cap: "Comparison of observed and fitted PM2.5 values. Diagonal line indicates perfect match of fitted and observed values."
ggplot(fit_PM, aes(x = value, y = .fitted)) +
geom_point() +
geom_abline(slope = 1) +
coord_fixed(ratio = 1) +
scale_y_continuous(limits = c(5, 20)) +
labs(x = "observed outcome values", y = "predicted outcome values")
# calculate rmse
fit_PM %>%
rmse(truth = value,
estimate = .fitted)
overallfit <- PM_wflow_fit %>%
list_fit(pm_split)
overallfit <- PM_wflow_fit %>%
last_fit(pm_split)
# run workflow to fit and validate
overallfit <- PM_wflow_fit %>%
last_fit(pm_split)
# calculate RMSE for testing data set
collect_metrics(overallfit)
# create four subsets
kfold_pm <- rsample::vfold_cv(data = train_pm, v = 4)
kfold_pm
xVal <- fit_resamples(PM_wflow, kfold_pm)
xVal
View(xVal)
View(xVal[[3]][[1]])
View(xVal[[4]][[1]])
View(xVal[[3]][[2]])
collect_metrics(xVal)
show_best(xVal, metric = "rmse")
collect_metrics(xVal)
View(xVal[[3]][[1]])
show_best(xVal, metric = "rmse")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# this will also take a few minutes
# you might get a pop up asking if you want to compile from source
devtools::install_github("CareyLabVT/glmtools", force = TRUE)
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# General Lake Model
library(GLMr)
library(glmtools)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# set path for nml file
nml_file <- "sim/glm2.nml"
# read in nml file
nml <- read_nml(nml_file)
# see contents
print(nml)
# query lake name
get_nml_value(nml, "lake_name")
#| label: fig-therm-str
#| fig-cap: "Metereological data describing drivers of thermal structure of Lake Awesome."
#| fig-width: 8
#| fig-height: 15
plot_meteo(nml_file)
# run model
run_glm("sim/", verbose = TRUE)
baseline <- file.path("sim", 'output.nc')
# create data frame with surface temperature
surf_temp <- get_var(file = baseline, "temp", reference = "surface", z_out = c(1)) %>%
rename(Baseline_Temp = temp_1)
#| label: fig-th-str-sim
#| fig-cap: "Thermal structure for our simulated lake."
plot_temp(file = baseline, fig_path = FALSE)
plot_temp(file = baseline, fig_path = FALSE) %>%
theme_standard
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
plot_temp(file = baseline, fig_path = FALSE) +
theme_standard
plot_temp(file = baseline, fig_path = FALSE) %>%
theme_standard
plot_temp(file = baseline, fig_path = FALSE)
p1 <- plot_temp(file = baseline, fig_path = FALSE)
#| label: fig-comp-sim-obs
#| fig-cap: "Comparison of field data and simulated temperatures."
#| fig-width: 8
#| fig-height: 10
# define observed field data
field_file <- file.path("sim", "field_data.csv")
# plot simulated vs observed data
plot_temp_compare(baseline, field_file)
sim_metrics(with_nml = FALSE)
therm_depths <- compare_to_field(baseline, field_file, metric = "thermo.depth",
as_value = TRUE, na.rm = TRUE)
head(therm_depths)
#| label: fig-mod-obs
#| fig-cap: "Comparison of modeled and observed thermoclines."
therm_depths %>%
pivot_longer(names_to = "dataset", values_to = "thermo_depth", 2:3) %>%
ggplot(aes(x = DateTime, y = thermo_depth, color = dataset)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkred")) +
labs(x = "Date", y = "Thermocline depth [m]")
#| label: fig-mod-obs
#| fig-cap: "Comparison of modeled and observed thermoclines."
#| echo: false
therm_depths %>%
pivot_longer(names_to = "dataset", values_to = "thermo_depth", 2:3) %>%
ggplot(aes(x = DateTime, y = thermo_depth, color = dataset)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkred")) +
labs(x = "Date", y = "Thermocline depth [m]")
#| label: fig-mod-obs-temp
#| fig-cap-location: bottom
#| fig-cap: "Comparison of modeled and observed water temperatures."
water_temp <- compare_to_field(baseline, field_file, metric = "water.temperature",
as_value = TRUE, na.rm = TRUE)
water_temp %>%
pivot_longer(names_to = "dataset", values_to = "water_temp", 2:3) %>%
ggplot(aes(x = DateTime, y = water_temp, color = dataset)) +
geom_point(shape = 1) +
scale_color_manual(values = c("darkblue", "darkred")) +
labs(x = "Date", y = "Water temperature [C]")
