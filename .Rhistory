theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
# install tidymodel packages
install.packages("tidymodels")
install.packages("tidymodels")
pheno <- read_delim("data/mnpn_master_dataset_2018.v2.txt", delim = "\t") %>%
clean_names()
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
install.packages("vctrs")
install.packages("vctrs")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
install.packages("vctrs")
remove.packages("vctrs")
install.packages("vctrs")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# modelling
library(tidymodels)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
pheno <- read_delim("data/mnpn_master_dataset_2018.v2.txt", delim = "\t") %>%
clean_names()
skim(pheno)
pheno <- pheno %>%
mutate(date = mdy(day),            # converts character in format month day year to date
month = month(date),        # extract month
day = day(date))            # extract day
View(pheno)
class(pheno$date)
colnames(pheno)
# output unique entries as dataframe
pheno %>%
distinct(lifeform)
# output unique entries as vector
unique(pheno$lifeform)
#| echo: false
woody <- pheno %>%
filter(group == "WOODY")
#| fig-cap: "Distribution of life history events throughout the year for Minnesota woody plants."
#| fig-width: 7
#| fig-height: 10
#| echo: false
ggplot(woody, aes(x = day_of_year, y = event)) +
geom_boxplot(fill = "darkorange") +
theme_standard
#| fig-cap: "Change in day of flowering for woody plants in Minnesota 1941 - 2018. Fill of individual points indicates the month of the flowering date, Linear trendline is fitted in red."
#| echo: false
# create df with subset
flowering <- woody %>%
filter(event == "FLOWERING")
# plot relationship
ggplot(flowering, aes(x = year, y = day_of_year, fill = month)) +
geom_point(shape = 21, size = 2, alpha = .5) +
geom_smooth(method = "lm", color = "red") +
scale_fill_viridis_c() +
labs(x = "Year", y = "Flowering date") +
theme_standard +
theme(legend.position = "bottom")
#| echo: false
elm <- flowering %>%
filter(species_common_name == "AMERICAN ELM")
unique(elm$county)
elm %>% count(county)
#| fig-cap: "Change in flowering data for American Elm in Ramsey Co., MN  (1941 - 1991). Fill of individual points indicates the month of the flowering date, the linear trendline is indicated in red."
#| eval: false
elm <- elm %>%
filter(county == "RAMSEY")
ggplot(elm, aes(x = year, y = day_of_year, fill = month)) +
geom_point(shape = 21, size = 3) +
geom_smooth(method = "lm", color = "red") +
scale_fill_viridis_c() +
labs(x = "year", y = "flowering date") +
theme_standard +
theme(legend.position = "bottom")
# fit linear regression
fit <- lm(day_of_year ~ year, data = elm)
# view summary of results
summary(fit)
temp <- read_delim("data/MN_temp.txt", delim = "\t", col_names = c("year", "temperature"))
#| fig-cap: "Change in mean March temperature [Fahrenheit] for 1941 - 1991 (blue) and linear trendline (red)."
#| echo: false
ggplot(temp, aes(x = year, y = temperature)) +
geom_line(color = "darkblue", size = 1) +
geom_point(shape = 21, size = 3, color = "darkblue", fill = "white") +
geom_smooth(method = "lm", color = "red") +
scale_fill_viridis_c() +
labs(x = "year", y = "flowering date") +
theme_standard +
theme(legend.position = "bottom")
#| fig-cap: "Change in mean March temperature [Fahrenheit] for 1941 - 1991 (orange bars)."
#| echo: false
ggplot(temp, aes(x = year, y = temperature)) +
geom_bar(stat = "identity", color = "black", fill = "darkorange") +
labs(x = "year", y = "flowering date") +
theme_standard +
theme(legend.position = "bottom")
#| fig-cap: "Relationship of mean temperature in March and flowering date for American Elm in Ramsey Co., MN."
#| echo: false
elm <- elm %>%
left_join(temp)
ggplot(elm, aes(x = temperature, y = day_of_year)) +
geom_point(shape = 21, size = 3, fill = "darkorange") +
geom_smooth(method = "lm", color = "red") +
scale_fill_viridis_c() +
labs(x = "temperature [F]", y = "flowering date") +
theme_standard +
theme(legend.position = "bottom")
linear_reg() %>%                                  # specify model
set_engine("lm") %>%                            # Define computational engine
fit(day_of_year ~ temperature, data = elm) %>%  # define variables
tidy()
#| echo: false
pheno %>%
group_by(group, species_common_name, event, county) %>%
summarize(min_year = min(year),
max_year = max(year),
time_observed = max_year - min_year,
n_observations = n()) %>%
filter(time_observed >=30 & n_observations >= 30) %>%
arrange(group, species_common_name, desc(time_observed)) %>%
kable(caption = "Minnesota species with at least 30 years of data for a specific phenophase in the Minnesota Phenology database.")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# modelling
library(tidymodels)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# mean march temperature
temp <- read_delim("data/MN_temp.txt", delim = "\t", col_names = c("year", "temperature"))
# flowering date w/temp
pheno <- read_delim("data/mnpn_master_dataset_2018.v2.txt", delim = "\t") %>%
clean_names() %>%
filter(species_common_name == "AMERICAN ELM" & event == "FLOWERING" & county == "RAMSEY") %>%
select(year, day_of_year) %>%
left_join(temp)
lm_fit <- linear_reg() %>%                        # specify model
set_engine("lm") %>%                            # Define computational engine
fit(day_of_year ~ temperature, data = pheno)    # define variables
#| label: fig-obs-pred
#| fig-cap: "Observed (orange) and corresponding predicted (blue) flowering dates using linear regression model (black line) for American Elm in Ramsey Country."
#| echo: false
# extract observed temperature
obs_temps <- pheno %>%
select(temperature)
# predict values
pred_values <- pred <- predict(lm_fit, new_data = obs_temps)
# add to pheno data frame
plot <- pheno %>%
bind_cols(pred_values) %>%
rename(observed = day_of_year,
predicted = .pred) %>%
select(year, temperature, observed, predicted) %>%
pivot_longer(names_to = "type", values_to = "flowering", 3:4)
# plot
ggplot(plot) +
geom_smooth(aes(x = temperature, y = flowering), method = "lm", color = "black", size = 0.5, se = FALSE) +
geom_line(aes(x = temperature, y = flowering, group = factor(temperature)), size = 1) +
geom_point(aes(x = temperature, y = flowering, fill = type), shape = 21, size = 2) +
scale_fill_manual(values = c("darkorange", "blue")) +
labs(x = "Temperature [F]", y = "flowering date") +
theme(legend.position = "bottom")
lm_aug <- augment(lm_fit$fit)
head(lm_aug) %>%
kable()
ggplot(lm_aug, aes(x = .fitted, y = .resid)) +
geom_point(shape = 21, size = 2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "predicted value", y = "residual")
# create data frame with temperature values from 10 - 65F
predict_temp <- expand.grid(temperature = 10:65)
head(predict_temp)
pred <- predict(lm_fit, new_data = predict_temp)
head(pred)
pred_CI <- predict(lm_fit, new_data = predict_temp,
type = "conf_int")
head(pred_CI)
predict_temp <- predict_temp %>%
bind_cols(pred) %>%
bind_cols(pred_CI)
head(predict_temp)
ggplot(predict_temp, aes(x = temperature, y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
geom_point(shape = 21, fill = "darkorange", size = 2) +
labs(x = "temperature", y = "predicted flowering date")
# set random seed
set.seed(42)
# assign 3/4 of data to training set
data_split <- initial_split(pheno, prop = 3/4)
# create two separate data frames
train_data <- training(data_split)
test_data <- testing(data_split)
dim(train_data)
dim(test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(day_of_year ~ temperature, data = train_data)
tidy(lm_fit) %>%
kable()
flowering_pred <- predict(lm_fit, test_data) %>%
bind_cols(test_data) %>%
select(year, temperature, day_of_year, .pred)
flowering_pred %>%
arrange(desc(.pred)) %>%
kable()
#| label: fig-pred-obs-training
#| fig-cap: "Comparison of predicted vs. observed flowering date for training data set. The dashed black line indicates perfect predictions, the red line is the linear trendline showing relationship of observed vs predicted values."
ggplot(flowering_pred, aes(x = day_of_year, y = .pred)) +
geom_smooth(method = "lm", color = "darkred") +
geom_abline(slope = 1, linetype = "dashed", color = "black", size = 1) +
geom_point(shape = 21, fill = "darkorange", size = 3) +
labs(x = "observed flowering date", y = "predicted flowering date")
rmse(flowering_pred,
truth = day_of_year,
estimate = .pred) %>%
kable()
lm_aug <- augment(lm_fit$fit)
rmse(lm_aug,
truth = day_of_year,
estimate = .fitted) %>%
kable()
lm_aug <- augment(lm_fit$fit)
head(lm_aug) %>%
kable()
#| label: fig-pred-resid
#| fig-cap: ""
ggplot(lm_aug, aes(x = .fitted, y = .resid)) +
geom_point(shape = 21, size = 2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "predicted value", y = "residual")
#| label: tbl-temp-values
#| fig-cap: "Data set containing values to predict flowering date."
# create data frame with temperature values from 10 - 65F
predict_temp <- expand.grid(temperature = 10:65)
head(predict_temp)
pred <- predict(lm_fit, new_data = predict_temp)
head(pred)
#| label: tbl-temp-values-predictions
#| fig-cap: "Predicted flowering dates for temperatures 10-65F."
pred <- predict(lm_fit, new_data = predict_temp)
head(pred)
#| label: tbl-temp-values-CI
#| fig-cap: "Confidence intervals for flowering dates for temperatures 10-65F."
pred_CI <- predict(lm_fit, new_data = predict_temp,
type = "conf_int")
head(pred_CI)
#| label: tbl-combined
#| fig-cap: "Predicted values and corresponding confidence intervals for flowering dates for temperatures 10-65F."
predict_temp <- predict_temp %>%
bind_cols(pred) %>%
bind_cols(pred_CI)
head(predict_temp)
#| label: fig-pred-CI
#| fig-cap: ""
ggplot(predict_temp, aes(x = temperature, y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
geom_point(shape = 21, fill = "darkorange", size = 2) +
labs(x = "temperature", y = "predicted flowering date")
# set random seed
set.seed(42)
# assign 3/4 of data to training set
data_split <- initial_split(pheno, prop = 3/4)
# create two separate data frames
train_data <- training(data_split)
test_data <- testing(data_split)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(day_of_year ~ temperature, data = train_data)
tidy(lm_fit) %>%
kable()
#| label: tbl-fit-training
#| tbl-cap: "Model parameters to predict flowering date based on temperature data."
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(day_of_year ~ temperature, data = train_data)
tidy(lm_fit) %>%
kable()
flowering_pred <- predict(lm_fit, test_data) %>%
bind_cols(test_data) %>%
select(year, temperature, day_of_year, .pred)
flowering_pred %>%
arrange(desc(.pred)) %>%
kable()
rmse(flowering_pred,
truth = day_of_year,
estimate = .pred) %>%
kable()
#| label: tbl-RMSE-training
#| tbl-cap: "Root mean square deviation (RMSE) for training data set"
lm_aug <- augment(lm_fit$fit)
rmse(lm_aug,
truth = day_of_year,
estimate = .fitted) %>%
kable()
