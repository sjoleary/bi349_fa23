#| fig-height: 5
#| echo: false
LakeIce %>%
pivot_longer(names_to = "dataset", values_to = "ice_thickness", 2:3) %>%
ggplot(aes(x = DateTime, y = ice_thickness, color = dataset)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkorange")) +
labs(x = "date", y = "ice thickness [C]")
plot_temp(file = typical_elnino, fig_path = FALSE)
# run simulation
run_glm(sim_folder_extreme)
# specify output file
extreme_elnino <- file.path(sim_folder_extreme, "output.nc")
LakeTemp_scenario <- get_temp(file = extreme_elnino, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
colnames(LakeTemp_scenario)
LakeTemp <- LakeTemp %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
left_join(LakeTemp_scenario, by = "DateTime") %>%
dplyr::rename(ExtremeElNino_SurfaceTemp = temp_0,
ExtremeElNino_BottomTemp = temp_33.3833669399235)
#| label: fig-comp-surf-bott-II
#| fig-cap-location: bottom
#| fig-cap: "Comparison of surface and bottom temperatures [C] for simulated baseline scenario (blue), typical El Nino year (orange), and extreme El Nino year (red)."
#| fig-width: 9
#| fig-height: 5
#| echo: false
LakeTemp %>%
pivot_longer(names_to = "dataset", values_to = "Temperature", 2:7) %>%
separate(dataset, into = c("scenario", "temp_measurem"), sep = "_") %>%
ggplot(aes(x = DateTime, y = Temperature, color = scenario)) +
geom_line(size = .7) +
scale_color_manual(values = c("darkblue", "red", "darkorange")) +
facet_grid(. ~ temp_measurem) +
labs(x = "date", y = "temperature [C]")
LakeIce_scenario <- get_var(extreme_elnino, "hice") %>%
rename(ice_ExtremeElNino = hice) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d")))
LakeIce <- LakeIce %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d"))) %>%
left_join(LakeIce_scenario)
IceCover <- LakeIce %>%
pivot_longer(names_to = "scenario", values_to = "ice_thickness", 2:4) %>%
group_by(scenario) %>%
summarize(ice_cover = sum(ice_thickness > 0))
IceCover <- IceCover %>%
mutate(TempOffset = case_when(scenario == "ice_baseline" ~ 0,
scenario == "ice_TypicalElNino" ~ typical_offset,
scenario == "ice_ExtremeElNino" ~ max_offset))
therm_struct <- get_temp(file = extreme_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
therm_struct <- therm_struct %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:ncol(therm_struct)) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
rlang::last_trace()
library(stringr)
therm_struct <- therm_struct %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:ncol(therm_struct)) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
#| label: fig-therm-struct
#| fig-cap: "Thermal structure of Lake Sunapee, NH for extreme El Nino event."
ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]")
# baseline scenario ----
therm_struct <- get_temp(file = baseline, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),
depth = as.numeric(depth)) %>%
filter(!is.na(temperature))
p1 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Baseline scenario (Lake Sunapee)")
# typical El Nino Year scenario ----
therm_struct <- get_temp(file = typical_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
p2 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Typical El Nino scenario (Lake Sunapee)")
# extreme El Nino Year scenario ----
therm_struct <- get_temp(file = extreme_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
p3 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Extreme scenario (Lake Sunapee)")
p1 / p2 / p3
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
install.packages("Hmisc")
install.packages(c("askpass", "bslib", "classInt", "coin"))
install.packages(c("cpp11", "credentials", "curl", "dbplyr"))
install.packages(c("digest", "dplyr", "evaluate", "fansi", "fontawesome"))
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# remote sensing & GIS
library(sf)
library(raster)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthhires)
library(rnaturalearthdata)
# data wrangling
library(plyr)
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(glue)
library(magrittr)
library(lubridate)
# stats
library(corrplot)
library(Hmisc)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
dtm <- raster("data/NEON_D17_SOAP_DP3_298000_4100000_DTM.tif")
class(dtm)
dsm <- raster("data/NEON_D17_SOAP_DP3_298000_4100000_DSM.tif")
slope <- terrain(dtm, opt = "slope", unit = "degrees", neighbors = 8)
slope <- terrain(dtm, opt = "slope", unit = "degrees", neighbors = 8)
# calculate aspect
aspect <- terrain(dtm, opt = "aspect", unit = "radians", neighbors = 8)
# calculate northness
north <- cos(aspect)
ndvi <- raster("data/NEON_D17_SOAP_DP3_298000_4100000_NDVI.tif")
veg_ht <- dsm - dtm
# create raster stack
all_data <- stack(dtm, dsm, slope, north, ndvi, veg_ht)
# rename raster layers
names(all_data) <- c("DTM", "DSM", "slope", "north", "NDVI", "Vegetation.Height")
plot(all_data,
col = viridis(255))
library(viridis)
plot(all_data,
col = viridis(255))
# create and empty data frame
df <- as.data.frame(matrix(NA, nrow = ncell(dtm), ncol=0))
# extract vegetation height
df$veg_ht <- raster::extract(veg_ht, extent(veg_ht))
# extract ndvi
df$ndvi <- raster::extract(ndvi, extent(ndvi))
# extract dtm
df$dtm  <- raster::extract(dtm, extent(dtm))
# extract slope
df$slope  <- raster::extract(slope, extent(slope))
# extract aspect
df$north <- raster::extract(north, extent(north))
head(df)
# create and empty data frame
df <- as.data.frame(matrix(NA, nrow = ncell(dtm), ncol=0))
head(df)
df
# extract vegetation height
df$veg_ht <- raster::extract(veg_ht, extent(veg_ht))
head(df)
# extract ndvi
df$ndvi <- raster::extract(ndvi, extent(ndvi))
head(df)
# extract dtm
df$dtm  <- raster::extract(dtm, extent(dtm))
head(df)
# extract slope
df$slope  <- raster::extract(slope, extent(slope))
head(df)
df %>% count(is.na(slope))
# create and empty data frame
df <- as.data.frame(matrix(NA, nrow = ncell(dtm), ncol=0))
# extract vegetation height
df$veg_ht <- raster::extract(veg_ht, extent(veg_ht))
# extract ndvi
df$ndvi <- raster::extract(ndvi, extent(ndvi))
# extract dtm
df$dtm  <- raster::extract(dtm, extent(dtm))
# extract slope
df$slope  <- raster::extract(slope, extent(slope))
# extract aspect
df$north <- raster::extract(north, extent(north))
head(df)
df <- df %>%
filter(!is.na(slope)) %>%
filter(!is.na(north))
head(df)
# set seed for reproducibility
set.seed(42)
# randomly select 1% of rows
df_sub <- df %>%
slice_sample(prop = 0.01)
#| label: fig-top-veg
#| fig-cap: "Relationship of topography and vegetation. Topography is described as elevation (dtm, in meters), northness (radians), and slope (degrees); vegetation is assessed using NDVI and vegetation height."
#| fig-width: 9
#| fig-height: 10
df_plot <- df_sub %>%
pivot_longer(names_to = "topog_param", values_to = "topog_meas", 3:5) %>%
pivot_longer(names_to = "veget_param", values_to = "veget_meas", 1:2)
ggplot(df_plot, aes(x = topog_meas, y = veget_meas)) +
geom_point(alpha = 0.25, size = .75) +
facet_grid(veget_param ~ topog_param, scales = "free") +
labs(x = "Topography", y = "Vegetation") +
theme_facet
#| label: fig-corr
#| fig-cap: "Pairwise relationships of all topographical and vegetation variables measured using Pearson's correlation coefficient."
corrplot(P_corr$r)
P_corr <- rcorr(as.matrix(df), type="pearson")
#| label: fig-corr
#| fig-cap: "Pairwise relationships of all topographical and vegetation variables measured using Pearson's correlation coefficient."
corrplot(P_corr$r)
P_corr$r
P_corr$P
tidy_cor <- as.data.frame(P_corr$r) %>%
rownames_to_column("Param1") %>%
pivot_longer(names_to = "Param2", values_to = "pearson", 2:6) %>%
filter(Param1 %in% c("veg_ht", "ndvi")) %>%
filter(!Param2 %in% c("veg_ht", "ndvi")) %>%
mutate(Site = "SOAP")
library(tibble)
tidy_cor <- as.data.frame(P_corr$r) %>%
rownames_to_column("Param1") %>%
pivot_longer(names_to = "Param2", values_to = "pearson", 2:6) %>%
filter(Param1 %in% c("veg_ht", "ndvi")) %>%
filter(!Param2 %in% c("veg_ht", "ndvi")) %>%
mutate(Site = "SOAP")
write_delim(tidy_cor, "results/SOAP_correlation.txt", delim = "\t")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# modelling
library(tidymodels)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
library(viridis)
# remote sensing & GIS
library(sf)
library(raster)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthhires)
library(rnaturalearthdata)
# data wrangling
library(plyr)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(skimr)
library(janitor)
library(glue)
library(magrittr)
library(lubridate)
# stats
library(corrplot)
library(Hmisc)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
sites <- read_delim("data/neon_sites.txt", delim = "\t") %>%
clean_names() %>%
separate(site_type, into = c("tmp", "site_cat"), sep = " ", remove = FALSE) %>%
dplyr::select(-tmp) %>%
filter(!state %in% c("AK", "HI", "PR"))
head(sites)
world <- ne_countries(scale = "medium", returnclass = "sf")
us_states <- ne_states(country = "United States of America", returnclass = "sf")
#| label: fig-neon
#| fig-cap: "NEON sites in contiguous US"
# lat/long for map extend
x_min <- min(sites$longitude) - 2
x_max <- max(sites$longitude) + 2
y_min <- min(sites$latitude) - 2
y_max <- max(sites$latitude) + 2
# set font sizes for text labels
site_size <- 2
# set color for fill
map_color <- "#a8d481"
# create plot
ggplot() +
geom_sf(data = world, color = "black", fill = map_color) +  # plot outline of countries
geom_sf(data = us_states, color = "black", fill = NA) +     # plot outline of states
coord_sf(xlim = c(x_min, x_max),
ylim = c(y_min, y_max)) +                          # plot boundaries for map
geom_text(data = sites, aes(x = longitude, y = latitude,    # add sites as labels
label = site_id, color = site_cat),
size = site_size) +
scale_color_manual(values = c("darkblue", "darkred"))
#| label: fig-neon-II
#| fig-cap: "NEON site locations"
# create plot
ggplot() +
geom_sf(data = world, color = "black", fill = map_color) +  # plot outline of countries
geom_sf(data = us_states, color = "black", fill = NA) +     # plot outline of states
coord_sf(xlim = c(x_min, x_max),
ylim = c(y_min, y_max)) +                          # plot boundaries for map
geom_point(data = sites, aes(x = longitude, y = latitude,   # add sites as labels
fill = site_cat),
shape = 21, size = 2, alpha = 0.5) +
scale_fill_manual(values = c("darkblue", "darkred"))
# path to results
path <- "results"
# pattern for filenames
pattern <- "correlation"
# list with all txt files in data directory
list.filenames <- list.files(path = path,
pattern = pattern)
# empty list to load files into
list.data <- list()
# loop to read in data files
for (i in list.filenames){
file <- as.character(glue("{path}/{i}"))
list.data[[i]] <- read_delim(file, delim = "\t")
}
correl_all <- ldply(list.data, data.frame) %>%
dplyr::select(-`.id`)
# # write to file
# write_delim(correl_all, "results/Comp_pearson.txt", delim = "\t")
#| label: fig-corr-slope-ndvi
#| fig-cap: "Pearson correlation coefficient for slope and NDVI for all assessed sites"
# add correlation coefficients
sites_pears <- sites %>%
left_join(correl_all, by = c("site_id" = "Site")) %>%
filter(!is.na(pearson)) %>%                          # retain only sites with pearson coefficient estimated
filter(Param1 == "ndvi" & Param2 == "slope")         # choose veg & topog relationship to map
# set font sizes for text labels
site_size <- 4
cor_size <- 5
# create plot
ggplot() +
geom_sf(data = world, color = "black", fill = map_color) +  # plot outline of countries
geom_sf(data = us_states, color = "black", fill = NA) +     # plot outline of states
coord_sf(xlim = c(x_min, x_max),
ylim = c(y_min, y_max)) +                          # plot boundaries for map
geom_text(data = sites_pears, aes(x = longitude, y = latitude,    # add sites as labels
label = site_id),
size = site_size, color = "black") +
geom_text(data = sites_pears, aes(x = longitude, y = latitude,    # add pearson coefficient as labels
label = round(pearson, digits = 2)),
size = cor_size, color = "darkred", nudge_y = -1.5) +   # shift label below actual coordinates
theme(legend.position = "none")
