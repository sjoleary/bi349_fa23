axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# lake models
library(GLMr)
library(glmtools)
# mapping
library(sf)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthhires)
library(rnaturalearthdata)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
annual_temp <- read_delim("data/sunapee_clim.txt") %>%
clean_names() %>%
filter(year >= 1970)
skim(annual_temp)
#| label: fig-air-temp
#| fig-cap-location: bottom
#| fig-cap:"Mean annual air temperature for Lake Sunapee, NH. Individual data points are color coded according to whether years were classified as Eln Nino (green), La Nina (blue) or neutral (orange)."
#| echo: false
ggplot(annual_temp, aes(x = year, y = air_temp_mean_c)) +
geom_line(color = "black", size = .5) +
geom_point(aes(fill = type), shape = 21, color = "black", size = 3) +
scale_fill_manual(values = c("green", "blue", "darkorange")) +
scale_y_continuous(limits = c(5, 9)) +
labs(x = "date", y = "mean annual temperature [C]")
annual_temp %>%
filter(year == 2013) %>%
pull(type)
# models
library(tidymodels)
#| label: fig-lin-reg
#| fig-cap: "Linear regressions comparing the observed in air temperature [C] over time for neutral and El Nino years."
annual_temp %>%
filter(type %in% c("Neutral", "ElNino")) %>%
ggplot(aes(x = year, y = air_temp_mean_c, color = type)) +
geom_point(shape = 21, size = 3) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "year", y = "mean annual air temperature [C]")
neutral_temp <- annual_temp %>%
filter(type == "Neutral")
lm_fit <- linear_reg() %>%                          # specify model
set_engine("lm") %>%                              # define computational engine
fit(air_temp_mean_c ~ year, data = neutral_temp)  # define variables
summary(lm_fit$fit) %>%
tidy()
neutral_slope <- summary(lm_fit$fit) %>%
tidy() %>%
filter(term == "year") %>%
pull(estimate)
neutral_intercept <- summary(lm_fit$fit) %>%
tidy() %>%
filter(term == "(Intercept)") %>%
pull(estimate)
lm_aug <- augment(lm_fit$fit)
head(lm_aug) %>%
kable()
neutral_2013 <- lm_aug %>%
filter(year == 2013) %>%
pull(.fitted)
# create subset with El Nino years
elnino_temp <- annual_temp %>%
filter(type == "ElNino")
# fit linear regression
lm_fit <- linear_reg() %>%                          # specify model
set_engine("lm") %>%                              # define computational engine
fit(air_temp_mean_c ~ year, data = elnino_temp)   # define variables
#| label: tbl-lin-reg-res
#| tbl-cap-location: top
#| tbl-cap: "linear regression of mean annual temperature for El Nino years over time in Lake Sunapee."
summary(lm_fit$fit) %>%
tidy() %>%
kable()
# create data frame year(s) to predict
predict_year <- expand.grid(year = 2013)
# calculate expected values
pred <- predict(lm_fit, new_data = predict_year)
# extract predicted value
elnino_2013 <- pred %>%
pull(.pred)
typical_offset <- elnino_2013 - neutral_2013
# specify new sim folder
sim_folder_typical <- "sim_lakes/Sunapee_typical"
# file path for original met file
baseline_met <- file.path(sim_folder, "met_hourly.csv")
# file path for original met file
baseline_met <- file.path(sim_folder, "met_hourly.csv")
library(glue)
# specify your lake
LakeName <- "Sunapee"
# specify your lake simulation for observed data
sim_folder <- file.path("sim_lakes", LakeName)
# specify new sim folder for El Nino year
sim_folder_typical <- glue("sim_lakes{LakeName}_typical")
# file path for original met file
baseline_met <- file.path(sim_folder, "met_hourly.csv")
# read in baseline met data
met_data <- read_delim(baseline_met, delim = ",") %>%
mutate(AirTemp = AirTemp + typical_offset,                                # add El Nino offset
time = as.POSIXct(strptime(time, "%Y-%m-%d %H:%M:%S", tz="EST")))  # make sure correct date/time format
# write new met data to new sim folder
write_delim(met_data, file.path(sim_folder_typical, "met_hourly_typical.csv"), delim = ",")
# specify new sim folder for El Nino year
sim_folder_typical <- glue("sim_lakes/{LakeName}_typical")
# write new met data to new sim folder
write_delim(met_data, file.path(sim_folder_typical, "met_hourly_typical.csv"), delim = ",")
# define file path
nml_file_typical <- file.path(sim_folder_typical, "glm2.nml")
# read nml file
nml <- read_nml(nml_file_typical)
# check met file name
get_nml_value(nml, "meteo_fl")
#| label: fig-comp-ann-temp
#| fig-cap: "Comparison of mean annual temperature [C] for neutral and El Nino years"
annual_temp %>%
filter(!type == "LaNina") %>%
ggplot(aes(x = year, y = air_temp_mean_c, color = type)) +
geom_smooth(method = "lm", se = FALSE) +
geom_point(size = 3) +
scale_color_manual(values = c("darkorange", "darkblue")) +
labs(x = "year", y = "mean annual air temp [C]")
# identify maximum offset
max_offset <- elnino_temp %>%
mutate(neutral_est = (neutral_slope * year) + neutral_intercept,
offset = air_temp_mean_c - neutral_est) %>%
summarize(max_offset = max(offset)) %>%
pull(max_offset)
# create file pat for extreme el nino simulation
sim_folder_extreme <- "sim_lakes/Sunapee_extreme"
# read in baseline met data & add offset
met_data <- read_delim(baseline_met, delim = ",") %>%
mutate(AirTemp = AirTemp + max_offset,                                   # add max El Nino offset
time = as.POSIXct(strptime(time, "%Y-%m-%d %H:%M:%S", tz="EST")))  # make sure correct date/time format
# write new met data to new sim folder
write_delim(met_data, file.path(sim_folder_extreme, "met_hourly_extreme.csv"), delim = ",")
# define file path
nml_file_extreme <- file.path(sim_folder_extreme, "glm2.nml")
# read nml file
nml <- read_nml(nml_file_extreme)
# check met file name
get_nml_value(nml, "meteo_fl")
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
#| label: setup
#| include: false
# custom functions ----
library(ggplot2)
theme_standard <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
theme_facet <- theme_classic() +
theme(
axis.text = element_text(size = 11, color = "black"),
axis.title = element_text(size = 16, color = "black"),
axis.title.y = element_text(vjust = 1.5, color = "black"),
axis.line = element_line(color = "black"),
legend.position = "bottom",
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey95", color = "black"),
strip.text.x = element_text(size = 16, color = "black"),
strip.text.y = element_text(size = 16, color = "black"))
# set options
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
options(htmltools.dir.version = FALSE)
theme_set(theme_standard)
# load libraries ----
# reporting
library(knitr)
# visualization
library(ggplot2)
library(ggthemes)
library(patchwork)
# data wrangling
library(dplyr)
library(tidyr)
library(readr)
library(skimr)
library(janitor)
library(magrittr)
library(lubridate)
# lake models
library(GLMr)
library(glmtools)
# mapping
library(sf)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthhires)
library(rnaturalearthdata)
# set other options ----
options(scipen=999)
knitr::opts_chunk$set(
tidy = FALSE,
message = FALSE,
warning = FALSE)
# specify your lake
LakeName <- "Sunapee"
# specify your lake simulation for observed data
sim_folder <- file.path("sim_lakes", LakeName)
# specify new sim folder for El Nino year
sim_folder_typical <- glue("sim_lakes/{LakeName}_typical")
# create file pat for extreme el nino simulation
sim_folder_extreme <- "sim_lakes/Sunapee_extreme"
run_glm(sim_folder_typical, verbose = TRUE)
typical_elnino <- file.path(sim_folder_typical, "output.nc")
LakeTemp_scenario <- get_temp(file = typical_elnino, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
# extract lake depth
LakeDepth <- get_surface_height(baseline)
# set filepath for output of your baseline data for your lake
baseline <- file.path(sim_folder, "output.nc")
# extract lake depth
LakeDepth <- get_surface_height(baseline)
# extract lake depth
LakeDepth <- get_surface_height(baseline)
LakeTemp_scenario <- get_temp(file = typical_elnino, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
colnames(LakeTemp_scenario)
LakeTemp <- get_temp(file = baseline, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
left_join(LakeTemp_scenario, by = "DateTime") %>%
rename(TypicalElNino_SurfaceTemp = temp_0,
TypicalElNino_BottomTemp = temp_33.3833669399235)
# extract lake depth
LakeDepth <- get_surface_height(baseline)
# get lake temperature for your el nino scenario
LakeTemp_scenario <- get_temp(file = typical_elnino, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
# check column names to be able to rename them downstream
colnames(LakeTemp_scenario)
# combine Lake Temperatures with baseline data
LakeTemp <- get_temp(file = baseline, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
# remember that you will need to use your specific column names to rename your baseline bottom temperature
rename(Baseline_SurfaceTemp = temp_0,
Baseline_BottomTemp = temp_33.3833669399235)
# change date formate so that they match across data frames
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
# join with typical el nino year scenario
left_join(LakeTemp_scenario, by = "DateTime") %>%
# rename the column names according to your data set
rename(TypicalElNino_SurfaceTemp = temp_0,
TypicalElNino_BottomTemp = temp_33.3833669399235)
# combine Lake Temperatures with baseline data
LakeTemp <- get_temp(file = baseline, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
# remember that you will need to use your specific column names to rename your baseline bottom temperature
rename(Baseline_SurfaceTemp = temp_0,
Baseline_BottomTemp = temp_33.3833669399235) %>%
# change date formate so that they match across data frames
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
# join with typical el nino year scenario
left_join(LakeTemp_scenario, by = "DateTime") %>%
# rename the column names according to your data set
rename(TypicalElNino_SurfaceTemp = temp_0,
TypicalElNino_BottomTemp = temp_33.3833669399235)
#| label: fig-comp-surf-bott
#| fig-cap-location: bottom
#| fig-cap: "Comparison of surface and bottom temperatures [C] for simulated baseline scenario (blue) and typical El Nino year (orange)."
#| fig-width: 9
#| fig-height: 5
#| echo: false
LakeTemp %>%
pivot_longer(names_to = "dataset", values_to = "Temperature", 2:5) %>%
separate(dataset, into = c("scenario", "temp_measurem"), sep = "_") %>%
ggplot(aes(x = DateTime, y = Temperature, color = scenario)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkorange")) +
facet_grid(. ~ temp_measurem) +
labs(x = "date", y = "temperature [C]")
#| label: fig-comp-surf-bott
#| fig-cap-location: bottom
#| fig-cap: "Comparison of surface and bottom temperatures [C] for simulated baseline scenario (blue) and typical El Nino year (orange)."
#| fig-width: 9
#| fig-height: 5
#| echo: false
LakeTemp %>%
pivot_longer(names_to = "dataset", values_to = "Temperature", 2:5) %>%
separate(dataset, into = c("scenario", "temp_measurem"), sep = "_") %>%
ggplot(aes(x = DateTime, y = Temperature, color = scenario)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkorange")) +
facet_grid(. ~ temp_measurem) +
labs(x = "date", y = "temperature [C]")
LakeIce_scenario <- get_var(typical_elnino, "hice") %>%
rename(ice_TypicalElNino = hice) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d")))
LakeIce <- get_var(baseline, "hice") %>%
rename(ice_baseline = hice) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d"))) %>%
left_join(LakeIce_scenario)
#| label: fig-comp-ice
#| fig-cap-location: bottom
#| fig-cap: "Comparison of ice thickness [m] for simulated baseline scenario (blue) and typical El Nino year (orange)."
#| fig-width: 9
#| fig-height: 5
#| echo: false
LakeIce %>%
pivot_longer(names_to = "dataset", values_to = "ice_thickness", 2:3) %>%
ggplot(aes(x = DateTime, y = ice_thickness, color = dataset)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkorange")) +
labs(x = "date", y = "ice thickness [C]")
plot_temp(file = typical_elnino, fig_path = FALSE)
# run simulation
run_glm(sim_folder_extreme)
# specify output file
extreme_elnino <- file.path(sim_folder_extreme, "output.nc")
LakeTemp_scenario <- get_temp(file = extreme_elnino, reference = "surface",
z_out = c(0, min(LakeDepth$surface_height))) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
colnames(LakeTemp_scenario)
LakeTemp <- LakeTemp %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
left_join(LakeTemp_scenario, by = "DateTime") %>%
dplyr::rename(ExtremeElNino_SurfaceTemp = temp_0,
ExtremeElNino_BottomTemp = temp_33.3833669399235)
#| label: fig-comp-surf-bott-II
#| fig-cap-location: bottom
#| fig-cap: "Comparison of surface and bottom temperatures [C] for simulated baseline scenario (blue), typical El Nino year (orange), and extreme El Nino year (red)."
#| fig-width: 9
#| fig-height: 5
#| echo: false
LakeTemp %>%
pivot_longer(names_to = "dataset", values_to = "Temperature", 2:7) %>%
separate(dataset, into = c("scenario", "temp_measurem"), sep = "_") %>%
ggplot(aes(x = DateTime, y = Temperature, color = scenario)) +
geom_line(size = .7) +
scale_color_manual(values = c("darkblue", "red", "darkorange")) +
facet_grid(. ~ temp_measurem) +
labs(x = "date", y = "temperature [C]")
LakeIce_scenario <- get_var(extreme_elnino, "hice") %>%
rename(ice_ExtremeElNino = hice) %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d")))
LakeIce <- LakeIce %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d"))) %>%
left_join(LakeIce_scenario)
IceCover <- LakeIce %>%
pivot_longer(names_to = "scenario", values_to = "ice_thickness", 2:4) %>%
group_by(scenario) %>%
summarize(ice_cover = sum(ice_thickness > 0))
IceCover <- IceCover %>%
mutate(TempOffset = case_when(scenario == "ice_baseline" ~ 0,
scenario == "ice_TypicalElNino" ~ typical_offset,
scenario == "ice_ExtremeElNino" ~ max_offset))
therm_struct <- get_temp(file = extreme_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST")))
therm_struct <- therm_struct %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:ncol(therm_struct)) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
rlang::last_trace()
library(stringr)
therm_struct <- therm_struct %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:ncol(therm_struct)) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
#| label: fig-therm-struct
#| fig-cap: "Thermal structure of Lake Sunapee, NH for extreme El Nino event."
ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]")
# baseline scenario ----
therm_struct <- get_temp(file = baseline, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),
depth = as.numeric(depth)) %>%
filter(!is.na(temperature))
p1 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Baseline scenario (Lake Sunapee)")
# typical El Nino Year scenario ----
therm_struct <- get_temp(file = typical_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
p2 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Typical El Nino scenario (Lake Sunapee)")
# extreme El Nino Year scenario ----
therm_struct <- get_temp(file = extreme_elnino, reference = "surface") %>%
mutate(DateTime = as.POSIXct(strptime(DateTime, "%Y-%m-%d", tz="EST"))) %>%
pivot_longer(names_to = "depth", values_to = "temperature", 2:21) %>%
mutate(depth = str_sub(depth, 6),     # remove first five characters
depth = as.numeric(depth)) %>% # convert to numeric
filter(!is.na(temperature))           # remove missing values.
p3 <- ggplot(therm_struct, aes(x = DateTime, y = depth, fill = temperature)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", limits=c(0, 30), breaks=seq(0, 30, by = 5)) +
scale_y_reverse() +
labs(x = "date", y = "depth [m]",
title = "Extreme scenario (Lake Sunapee)")
p1 / p2 / p3
