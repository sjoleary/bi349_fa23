{
  "hash": "f5cbbba2af800dd480f56f27c8a7f9b0",
  "result": {
    "markdown": "\n# Getting set up with R and Rstudio\n\n\n\n\n\n\n## Learning Objectives\n\n**After completing this activity you should**\n\n* be able to download and install `R` and `Rstudio` on your laptop\n* be able to install `Rtools` & `devtools` to be able to compile `R packages` from source (Windows).\n* understand the main use for each of the four main panes in the `Rstudio` GUI.\n* understand what a package is in `R` and how to install them.\n\n\n## Install & Set up R and Rstudio on your computer\n\nIf you have already installed `R` and `Rstudio` make sure your R version is up to date. Whenever you open `Rstudio` the version will be printed in the console (bottom left pane). In addition, you can always check what version is installed by typing `sessionInfo()` into your console. You should be using version 4.0.0 or later. You do not need to uninstall old version of `R`. If you do have to update, you will need to re-install packages (see below) for R4.0.0\n\n### Windows\n\n**Install R**\n\n* Download most recent version of R for Windows [here](https://cran.r-project.org/bin/windows/base/release.htm).\n* Run the `.exe` file that was downloaded and follow instructions in the set-up wizard.\n\n\n**Install Rtools**\n\n* Download Rtools [here](https://cran.r-project.org/bin/windows/Rtools/rtools40-x86_64.exe).\n* Run the downloaded `.exe` file that was download and follow the instructions in the set-up wizard.\n\n\n**Install Rstudio**\n\n* Go to Rstudio download [page](http://www.rstudio.com/ide/download/desktop).\n* Scroll down to select the `Rstudio` current version for Windows XP/Vista/7/8/10.\n* Run the `.exe` file that was downloaded and follow instructions in the set-up wizard.\n\n\n**Finish setting up Rtools**\n\n* Open `Rstudio` to make sure you aren't getting any error messages.\n* Put `Rtools` in your path by typing `writeLines('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', con = \"~/.Renviron\")` in the console window.\n* Install the `devtools` package by typing `install.packages(\"devtools\")` in the console.\n\n**Install quarto**\n\n[Download quarto using this link](https://quarto.org/docs/get-started/). Pick the file according to your operating system\nRun the downloaded `.exe` file that was download and follow the instructions in the set-up wizard.\n\n\n### Mac OS X\n\n**Download & install R**\n\n* Go to (CRAN)[http://cran.r-project.org/], select `Download R for (Mac) OS X`.\n* Download the `.pkg` file for your OS X version.\n* Run the downloaded file to install `R`.\n\n\n**Download & install XQuartz** (needed to run some R packages)\n\n* Download [XQuartz](https://www.xquartz.org/)\n* Run the downloaded file to install\n\n\n**Download & install Rstudio**\n\n* Go to Rstudio download [page](http://www.rstudio.com/ide/download/desktop).\n* Scroll down to select the `Rstudio` current version for Mac OS X.\n* Run the `.exe` file that was downloaded and follow instructions in the set-up wizard.\n\n**Install quarto**\n\n[Download quarto using this link](https://quarto.org/docs/get-started/). Pick the file according to your operating system\nRun the downloaded `.exe` file that was download and follow the instructions in the set-up wizard.\n\n## Get to know Rstudio\n\n`Rstudio` is an Integrated Development Environment (IDE) that you can use to write code, navigate files, inspect objects, etc. The advantage of using an IDE is that you have access to shortcuts, visual cues, troubleshooting, navigation, and autocomplete help.\n\n\n### GUI Layout\n\nGUI stands for graphic user interface and refers to a type of user interface that allows users to interact with software applications and electronic devices through visual elements such as icons, buttons, windows, and menus, rather than using text-based command-line interfaces.\n\nYou have probably mostly interacted with computer programs through a GUI, where you interact with the system by manipulating graphical elements using a pointing device like a mouse, touch screen, or stylus. GUIs provide a more intuitive and user-friendly way for individuals to interact with computers and software because you can \"see\" what the effect of what you are doing is having. Graphical User Interfaces are a major departure from earlier text-based interfaces like command-line interfaces. They have contributed significantly to the widespread adoption of computers and software by making them more accessible to a broader range of users. GUIs are used in various types of software, from operating systems to applications like web browsers, image editors, word processors, and more.\n\nNot too long ago, if you had wanted to learn R or another programming language you would have been working directly on a console instead of an IDE like `Rstudio` which has made coding a lot more accessible to beginners because you can more easily use scripts, interactively run code and visualize data.\n\n\n::: {.callout-note}\n\n[Use this link to access an Rstudio IDE Cheatsheet pointing out the key features using annotated impages of the different panes](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html?_gl=1*1bu7wnp*_ga*MTQwMDM2MTQ2MC4xNjkzMTA2MDUy*_ga_2C0WZ1JHG0*MTY5MzM2MzQwNy4yLjAuMTY5MzM2MzQwNy4wLjAuMA). You can also [download a pdf version and keep a printout handy as you get used to the GUI](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf).\n\n:::\n\nOpen `Rstudio` and identify the four panes in the interface (default layout).\n\n1. **Editor** (top left): edit scripts/other documents, code can be sent directly to the console.\n2. **R console** (bottom left): Run code either by directly typing the code or sending it from the editor pane.\n3. **Environment/history** (top right): Contains variables/objects as you create them & full history of functions/commands that have been run.\n4. **files/plots/packages/help/viewer** (bottom right): Different tabs in this pane wil let you explore files on your computer, view plots, loaded packages, and read manual pages for various functions.\n\nThe panes can be customized (`Rstudio -> Preferences -> Pane Layout`) and you can move/re-size them using your mouse.\n\n::: {.callout-note}\n\nWe are going to switch to have the Console in our top right and the Environment in the bottom left which makes it easier to see your code output and your script/quarto document at the same time. \n\n:::\n\n\n\n### Interacting with R in Rstudio\n\nThink of `R` as a language that allows you to give your computer precise instructions (code) to follow.\n\n* **Commands** are the instructions we are giving the computer, usually as a series of functions.\n* **Executing** code or a program means you are telling the computer to run it.\n\nThere are three main ways to interact with `R` - directly using console, script files (`*.R`), or code chunks embedded in R markdown (`*.Rmd`) or quarto files (`*.qmd`). We will generally be working with the later.\n\nThe console is where you execute code and see the results of those commands. You can type your code directly into the console and hit `Enter` to execute it. You can review those commands in the history pane (or by saving the history) but if you close the session and don't save the history to file those commands will be forgotten.\n\nBy contrast, writing your code in the script editor either as a standard script or as a code chunk in an quarto document allows you to have a reproducible workflow (future you and other collaborators will thank you).\n\nExecuting an entire script, a code chunk, or individual functions from a script will run them in the console.\n\n* `Ctrl` + `Enter` will execute commands directly from the script editor. You can use this to run the line of code your cursor is currently in in the script editor or you can highlight a series of lines to execute.\n* If you are using a quarto file you can execute an entire code chunk by pressing the green arrow in the top right corner.\n\nIf the console is ready for you to execute commands you should see a `>` prompt. If you e.g. forget a `)` you will see a `+` prompt - `R` is telling you that it is expecting further code. When this happens and you don't know what you are missing (usually it is an unmatched quotation or parenthesis), make sure your cursor is in the console and hit the `Esc` key.\n\n::: {.callout-info}\n\nWe will run through these options, but you can always check back here while you are getting used to R.\n\n:::\n\n\n### Customize Rstudio\n\nThere are several options to customize Rstudio including setting a theme, and other formatting preferences. You can access this using `Tools > Global Options`. I recommend using a dark theme (it's a lot easier on the eyes) and keeping the panes in the same positions outlined above because it will make troubleshooting a lot easier^[\"You should see xx in the top left\" is a lot more helpful if your top left looks like my top left!].\n\n\n## Installing and using packages in R\n\n### Install a package\n\nThink of R packages or libraries as tool kit comprising a set of functions (tools) to perform specific tasks. `R` comes with a set of packages already installed that gives you base `R` functions; you can view these and determine which have been loaded in the `Packages` tab in the bottom right pane. For other tasks we will need additional packages. ^[Most `R` packages are found in the [CRAN repository](https://cran.r-project.org/) and on [Bioconducter](https://www.bioconductor.org/), developmental packages are available on [github](https://github.com/).]\n\nA central group of packages for data wrangling and processing form the [tidyverse](https://www.tidyverse.org/), described as \"... *an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.*\" - We are going to heavily rely on core functions from the tidyverse to wrangle, summarize, and analyze data. \n\nWhen you install packages they will be downloaded and installed onto your computer. Determine what your default path is using `.libPaths()` and change if necessary.\n\nThe easiest way to install packages directly in the console is to use the `install.packages()` function. \n\nUse the `R` console to install some libraries to get us started (we will install other libraries as needed for other labs).\n\n::: {.column-margin}\n\nUsing `#` in an R script allows you to insert comments that are ignored by R when executing your code. Use comments to document your code, future you will thank you! Before submitting any of your skills tests or homework assignments you should always go through and make sure each piece of code has a descriptive comment. You do not need to add a comment for multi-line code that you are stringing together using a pipe `%>%` but you should have one descriptive comment above the set of commands you are giving `R` and then make sure that you add any comments that you need to remember how the function works or which parameters might be useful to tweak/set differently if you were to reuse that code.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install central packages in the tidyverse\ninstall.packages(\"tidyverse\")\n\n# install additional packages\ninstall.packages(\"plyr\", \"ggthemes\", \"patchwork\", \"glue\")\n```\n:::\n\n\nLet's check if you were able to successfully install those packages by ensureing you can load them. Any time you start a new R session (e.g. by closing Rstudio and restarting it), you will need to load your libraries beyond the base libraries that are automatically loaded using the `library()` function in order to be able to use the functions specific to that package^[Troubleshooting tip: if you get an error along the lines of `function() cannot be found` the first thing you will want to do is check if your libraries are loaded!].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load library\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lubridate' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nIf you don't see any error messages in the console along the lines of `there is no package called ...` you are all set. If you look in the `packages` tab in the lower right panel you should also see that packages such as `dplyr` and `tidyr` (two of the central `tidyverse` packages) now have a little check box next to them.\n\n\n### Updating R packages\n\nYou should generally make sure to keep your `R` packages up to date as new versions include important bugfixes and additional improvements. The easiest way to update packages is to use the `Update` button in the `Packages` tab in the bottom right panel. Over the course of the semester you should not have to do this, but when you install new packages you might get message that some of your packages need to be updated which you can then either choose to do at that point or ignore.\n\n::: {.callout-warning}\n\nBe aware that updating packages might break some code you have previously written. For most of what we will be doing this should not be the case. If you used `R` for a previous course, make sure to update you packages at the beginning of this course and we should be set for the semester.\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}