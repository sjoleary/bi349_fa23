{"title":"Characterizing community diversity","markdown":{"headingText":"Characterizing community diversity","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\n\n# set options\nknitr::opts_chunk$set(\n  tidy = FALSE, \n  message = FALSE,\n\twarning = FALSE)\n\noptions(htmltools.dir.version = FALSE)\n\n```\n\n\n**Learning Objectives**\n\nAfter completing this lab you should be able to \n\n* transform metabarcoding results using `phyloseq`\n* use `vegan:diversity()` to calculate standard measure of diversity\n\n\n[You should have already downloaded the project directory for this module ](https://drive.google.com/drive/folders/1Zxltr7neJcLzU39emYpXyjpSArFgrh-l?usp=sharing), make sure the directory is unzipped and move it to your `bi328` directory. You can open the `Rproj` for this module either by double clicking on it which will launch `Rstudio` or by opening `Rstudio` and then using `File > Open Project` or by clicking on the `Rproject` icon in the top right of your program window and selecting `Open Project`. \n\nOnce you have opened a project you should see the project name in the top right corner^[Pro tip: If you run into issues where a quarto document won't render or file paths aren't working (especially if things were working previously) one of your first steps should be to double check that the correct `Rproj` is loaded.].\n\nThere should be a document named `12_community-diversity.qmd` in your project directory. Use that file to work through this tutorial - you will hand in your rendered (\"knitted\") `quarto` file as your homework assignment. So, first thing in the `YAML` header, change the author to your name. You will use this `quarto` document to record your answers. \n\nIn this case, this chapter doubles as your skills challenge for the week.\n\nBefore we start we need to install a package before we get started. `vegan` is a package that has a wide range of functions that implement standard \n\n```{r}\n#| eval: false\n\ninstall.packages(\"vegan\")\n\nBiocManager::install(\"phyloseq\")\n\n```\n\n\nNow we can load the packages we need\n\n```{r}\n\n# load libraries\nlibrary(phyloseq)\nlibrary(vegan)\n\nlibrary(knitr)\nlibrary(tidyverse)\n\n```\n\n## Compile data sets\n\nWe are going to import the data you will need for this chapter exploring how to characterize biological communities. We'll start by loading to objects into your environment. One is the ASV table and the second is the corresponding taxonomy table from the fungi data set we were working on in the previous chapter.\n\nWe are going to read in a data set that contains information about the soil plots from which the fungi eDNA was isolated.\n\n```{r}\n\n# load sample data\nsoil <- read_delim(\"data/soil.csv\", delim = \";\")\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nUse your coding skills to take a look at the soil data set and the describe what information it contains (typical things you want to check are row, column numbers, column names, determining if it is a tidy data set, figuring out what information/variables are in the data set).\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\nThe package `phyloseq` that we installed has various utility functions to deal with metabarcoding data set. It has a specific object class that allows us to store the asv table, taxonomy table, and sample meta data in different slots. Various functions can then be used to pull information from those slots. We can load the object `ps` directly into your environment using the following code.\n\n```{r}\n\n# create phyloseq object\nload(file = \"data/ps.rdata\")\n\n```\n\n\n## Data filtering and transformation\n\nBefore we can start exploring our data set we have a few steps to complete to transform it into containing the data we want in the format we want tit.\n\nLet's start by taking a looking at how many taxa are currently present in the data set using `phyloseq::ntaxa()`\n\n```{r}\n\nntaxa(ps)\n\n```\n\nWe only want ASVs that were assigned as fungi in our reference database. We can use `phyloseq::subset_taxa` to filter by kingdom.\n\n```{r}\n\nps_fungi <- subset_taxa(ps, Kingdom == \"k__Fungi\")\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nFigure out how many non-fungi groups were filtered.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\nNext, we want to remove any singletons or doubletons. These are ASVs that are only represented by one or two reads - we can assume these are artifacts.\n\n```{r}\n\nps_fungi_nosd <- filter_taxa(ps_fungi, function(x) sum(x) > 2, TRUE)\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nFigure out how many taxonomic groups are still in the data set.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\nIn many situations, metabarcoding eDNA samples is semi-quantitative^[We can always confidentally use metbarcoding data as qualitative data, i.e. as presence/absence data. Though even here we should be careful about whether \"not detected\" should be interpreted as absent.]. The number of DNA templates in the environment are correlated to the number of individuals/biomass of a given taxonomic group. While you cannot necessarily back calculate the absolute abundance or number of specimen present in an environment you can use the proportion of reads assigned to a taxonomic group as a metric of relative abundance.\n\nOne way to convert species abundance from absolute to relative is using a Hellinger transformation which standardizes the abundances to the sample totals and then square roots them. The function `phyloseq::transform_sample_counts()` allows us to apply a function to transform sample counts.\n\n```{r}\n\nps_fungi_nosd_hel <- transform_sample_counts(ps_fungi_nosd, function(x) sqrt(x/sum(x)))\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nOur data set could still contain multiple ASVs that have been assigned to the same species. Explain why this is an expected out come when using ASVs but would be rare/non-existant if you are using OTUs as the output of your bioinformatics pipeline. \n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\nTo complete our data filtering and transformation we will use `phyloseq::tax_glom()` to collapse ASVs asigned to the same taxonomic group at the species level.\n\n```{r}\n\nps_transf = tax_glom(ps_fungi_nosd_hel, \"Species\", NArm = FALSE)\n\n```\n\n\nLet's explore our final transformed data set\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nApply the functions `ntaxa()`, `nsamples()`, `rank_names()`, and `sample_variable()` to our final transformed phyloseq object. Look up what each function does, make sure to comment/annotate your code and then briefly describe what you've learned about our data set.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\nRecall that our `phyloseq` object contains a slot that holds our ASVs table and our taxonomic table that we can access at as such.\n\n```{r}\n\notu_table(ps_transf)[1:2, 1:2]\n\ntax_table(ps_transf)[1:2, 1:2]\n\n```\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nExplain how the notation `[1:2, 1:2]` modifies the output\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n## Combine data sets\n\nWe have three explanatory variables that could be driving differences in fungal communities among samples.\n\n* Soil samples were taken in differnt **forest plots** that were classified as dominated by *Acer saccharum* (AS) or  *Fagus grandifolia* (FG) or mixed with other small trees and shrubs present (mixed).\n* Soil samples where taken from different soil horizons (depths): L, F, H, Ae, or B\n* Soil chemistry (carbon, nitrogen, pH)\n\nThis information is stored in our `soil` dataframe.\n\nNow that we've filtered and transformed our data set, let's pull it back out to create a dataframe as the object you are more familiar with in terms of being able to manipulate it.\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nLet's pull out our taxonomic table and transform it into a dataframe. Comment the following code line by line to describe what each function/arguments is doing.\n\n```{r}\n\nasv_tax <- tax_table(ps_transf) %>%  #\n  as.data.frame() %>%            #\n  rownames_to_column(\"asv\")      #\n\n# write out interim file\nwrite_delim(asv_tax, \"results/asv_tax.txt\", delim = \"\\t\")\n\n```\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nNow, let's pull out our information on how many times each ASV is observed in a each sample. Comment the following code line by line to describe what each function/arguments is doing. You may need to look up some of the functions.\n\n\n```{r}\n\nasv_counts <- otu_table(ps_transf) %>%  #\n  t() %>%                               #\n  as.data.frame() %>%                   #\n  rownames_to_column(\"asv\")             #\n\n# write out interim file\nwrite_delim(asv_counts, \"results/asv_counts.txt\", delim = \"\\t\")\n\n```\n\n::: \n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nTake a look at how your `asv_tax` and `asv_count` objects are now formatted and briefly describe it (remember, key things are number or rows, columns, what those columns are).\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nReally, what we want is for our `asv_counts` table to contain the taxonomic information contained in the `asv_tax` table. Combine those two data sets into an object called `tax_count`. Remove the ASV sequence from the dataframe and arrange the remaining columns to first have all the taxonomic information, then the number of occurrences in each sample. Print the first few lines to the console when you are done. \n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n::: {.callout-tip icon=false collapse=true}\n\n## Pointers\n\nThis is what your result should look like\n\n```{r}\n#| echo: false\n\ntax_count <- asv_counts %>%\n  left_join(asv_tax) %>%\n  select(Kingdom, Phylum, Class, Order, Family, Genus, Species, everything(), -asv)\n\nhead(tax_count)\n\n```\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nTake a look at your resulting data set and determine if it is a tidy data set or not. Then describe how you would transform it into a tidy data set and explain why those changes make it fulfill all the conditions for it to be tidy.\n\nSpoiler alert: It's not tidy ... go ahead and create an object called `tidy_counts` that's a tidy data frame.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n\n::: {.callout-tip icon=false collapse=true}\n\n## Pointers\n\nThis is what your result should look like (it's probably clear why tidy data sets are also referred to as long data sets at this point ...)\n\n```{r}\n#| echo: false\n\ntidy_counts <- tax_count %>%\n  pivot_longer(names_to = \"ID\", values_to = \"count\", 8:81)\n\nhead(tidy_counts)\n\n```\n\n:::\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nHm, if only our `tidy_counts` object *also* contained the sample meta-data currently in our dataframe `soil`. Go ahead and add that information to our `tidy_counts` data frame. Print the first few rows of your data frame to the console to make sure this worked.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n\n::: {.callout-tip icon=false collapse=true}\n\n## Pointers\n\nThis is what your result should look like (are we having fun yet?)... if you are having problems combining these data frames recall that you need one column in common. It's easiest if those columns also share the same column name, but you can look up the function to see if there is a way around it if they don't match up.\n\n```{r}\n#| echo: false\n\ntidy_counts <- tidy_counts %>%\n  left_join(soil)\n\nhead(tidy_counts)\n\n```\n\n:::\n\n## Characterize community diversity\n\nOkay... now we're ready to have some fun.\n\nFirst, let's find out what taxonomic groups are present in the entire data set.\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nPrint a series of tables to the console and in your html document^[use the function `kable()` to print the entire data frame in a pretty table] that comprise a single column each that show all the phyla, classes, orders, famiies, genera, and species in the data set in alphabetical order, respectively. Note that the values in those columns have a prefix indicate the taxonomic level. Get rid of that in your output.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n::: {.callout-tip icon=false collapse=true}\n\n## {{< fa person-chalkboard >}}    Pointers\n\nHere's what the table for phylum should look like\n\n```{r}\n#| echo: false\n\nkable(\ntidy_counts %>%\n  distinct(Phylum) %>%\n  separate(Phylum, into = c(\"tmp\", \"Phylum\"), sep = \"__\") %>%\n  select(-tmp) %>%\n  arrange(Phylum)\n)\n\n```\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nNow, let's compare patterns across different forest plot types. Create separate tables and print them to the console/have them print neatly in your rendered html files for easy comparison of the mean relative abundance for phylum, order, and family for each forest plot type. Print the first four digits only.\n\nDescribe your results.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n::: {.callout-tip icon=false collapse=true}\n\n## {{< fa person-chalkboard >}}    Pointers\n\nHere's what the table for phylum should look like\n\n```{r}\n#| echo: false\n\nkable(\ntidy_counts %>%\n  group_by(forest, Phylum) %>%\n  summarize(mean_rel_abund = mean(count)) %>%\n  pivot_wider(names_from = \"forest\", values_from = \"mean_rel_abund\"),\ndigits = 4\n)\n\n```\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nPick one forest plot type that you are interested in exploring further. Create tables that make it easy to compare the mean relative abundance for phylum, order, and family across the different soil horizons, and print those three table to the console and to your rendered html report. \n\nDescribe your results.\n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n\nMeasures of diversity enable us to quantify the complexity of biological communities in a way that allows us to objectively compare communities across space and time. Measures of alpha diversity describe the diversity of a single sample and are based on the number of observed taxonomic groups or their relative abundance, beta diversity describes the variation between samples, gamma diversity describes the global diversity observed across a large number of communities. \n\nCommon alpha diversity statistics include:\n\n* **observed richness** the number of observed taxa. \n* **Shannon Index** (Shannon-Weaver or Shannon-Wiener Index) quantifies how difficult it is to predict the identity of a randomly sampled individual. Ranges from 0 (total certainty) to log(S) (total uncertainty).\n* **Simpson Index** quantifies the probability that two randomly chosen individuals are the same taxonomic group (ranges from 0 to 1).\n* **Inverse Simpson Index** is defined as the number of species needed to have the same Simpson index value as the observed community assuming a theoretical community where all species are equally abundant. \n\nThe Shannon and Simpson Diversity are entropy-based indices that measure the disorder (diversity) of a system. In information theory entropy is used to describe the fact that we can quantify the degree of uncertainty associated with with predicted pieces of information. Applied to ecology this means that when describing diversity using these indices we are determining whether or not individuals randomly drawn from a community are the same or different species (or other taxonomic group). \n\nThe relationship between species richness and Shannon diversity is non-linear, i.e. at higher levels of species richness, communities appear more similar in terms of the magnitude of the index compared to lower levels of species richness - which is counter intuitive to the way species richness works. The solution to this is to linearize the indices. As a result, more recently, diversity indices have been proposed where diversity values are converted into equivalent (or *effective numbers*) of species [@jost_entropy_2006]. The effective number of species is the number of species in a theoretical community where all species (taxonomic groups) are equally abundant that would produce the same observed value of diversity (a similar principle is applies in genetics for the concept of effective population sizes). While the definition of effective numbers is not as intuitive as the entropy-based ones the values that we yield are. Not only are the \"units\" species (instead of being a unitless index), but they have properties that we intuitively understand. For example, effective numbers obey the doubling principle: If you have two communities with equally abundant but totally distinct species and combine them, that new community would have a diversity that is 2x that of the original ones.\n\nThe package `vegan` has several functions implemented that allow us to calculate these diversity stats. Look up any functions you are not familiar with in the following code and comment it to describe what each line of code is doing.\n\n```{r}\n\ndiversity <- tidy_counts %>%\n  group_by(ID, forest, horizon) %>%\n  summarize(richness = specnumber(count),\n            shannon = diversity(count, index = \"shannon\"),\n            simpson = diversity(count, index = \"simpson\"),\n            invsimpson = diversity(count, index = \"invsimpson\")) %>%\n  pivot_longer(cols = c(richness, shannon, simpson, invsimpson),\n               names_to = \"metric\")\n\n```\n\nWe can create a series of plots that compare the different diversity stats for each forest plot type and soil horizon location^[Well, I can but you will be able to soon, too].\n\n```{r}\n\nggplot(diversity, aes(x = forest, y = value, color = forest)) +\n  geom_boxplot(aes(color = forest), outlier.shape = NA, fill = \"transparent\", size = 1) +\n  geom_point(aes(fill = forest),\n             position = position_jitterdodge(jitter.width = .3),\n             shape = 21, color = \"black\", size = 3) +\n  facet_grid(metric ~ horizon, scales = \"free\") +\n  labs(x = \" \", y = \" \")\n\n```\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nDescribe the results. \n\n:::\n\n\n::: {.callout-important icon=false}\n\n## {{< fa pen >}}   Did it!\n\n[Your answer here]\n\n:::\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","reference-location":"margin","toc":true,"toc-depth":3,"number-sections":true,"embed-resources":true,"output-file":"12_community-diversity.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"citation-location":"margin","fig-cap-location":"margin","tbl-cap-location":"margin","theme":"superhero","toc-location":"left","code-copy":"hover","anchor-sections":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}