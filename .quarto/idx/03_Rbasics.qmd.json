{"title":"R: Functions, Objects, Vectors - oh my!","markdown":{"headingText":"R: Functions, Objects, Vectors - oh my!","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\n\n# set options\nknitr::opts_chunk$set(\n  tidy = FALSE, \n  message = FALSE,\n\twarning = FALSE)\n\noptions(htmltools.dir.version = FALSE)\n\n```\n\n\n## Learning Objectives\n\n**After completing this tutorial you should be able to**\n\n* name, create, and assign values to objects.\n* save a series of commands/code as an `R script`.\n* use comments to describe your code/scripts.\n* call `functions` and modify the default options using their `arguments`.\n* understand what a `vector` is and distinguish between the main data types.\n* to inspect, subset, and extract their content from a `vector`. \n* understand how `data.frames` and `vectors` relate.\n\n\n## R is all about `Objects`\n\nYou can think of the `R console` as a super-powerful calculator. You can get output from `R` by simply typing math directly into the console.\n\n```{r}\n\n13 + 29\n\n```\n\nor \n\n```{r}\n\n546 / 13\n\n```\n\nWell that's fun - but not super helpful in our context. \n\nIn the R programming language, an object is a fundamental concept used to store, manipulate, and represent data. Everything in R is treated as an object, whether it's a number (`numeric`), a text string (`character`), a dataset (`data.frame`), or even more complex data structures.\n\n`Objects` in R can be created, modified, and used to perform various operations. `Objects` are assigned names that you can then use to reference them in your code. When you create an `object`, you're essentially creating a container that holds a `value` or data.\n\nCreating an `object` is straightforward. First, we give it a name, then we use the `assignment operator` to assign it a `value`.\n\nThe `assignment operator` (`<-`) assigns the `value` on the right of the `<-` to the `object` on the left^[Start building good habits starting now in terms of your coding style. For example, your code is a lot more readable if you use white space to your advantage. For example, make sure you have a space before and after your ` <- `].\n\n```{r}\n\nfork_length_mm <- 344\n\n```\n\nType that into the console and execute the command using `Enter`. If you look at your `Global Environment` (bottom left panel) you should now see `forklength` and the `value` you assigned it.\n\nNotice, how when you assigned a `value` to your new `object` nothing was printed in the console compared to when you were typing in math.\n\nTo print the `value` of an `object` you can type the name of the object into the console.\n\n```{r}\n\n# print value\nfork_length_mm\n\n```\n\nNow that `fork_length_mm` is in your environment we can use it to compute instead of the `value` itself.\n\nFor example, we might need to convert our fork length from millimeters (mm) to centimeters (cm).\n\n```{r}\n\nfork_length_mm / 10 \n\n```\n\nWe can change the `value` of an `object` any time by assigning it a new one. Changing the `value` of one `object` does not change the `values` of other objects.\n\n```{r}\n\nfork_length_mm <- 567\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}  Give it a whirl!\n\nCreate a new object with the fork length in centimeters. Then change then change the value of our fork length in millimeters object to 50. What do you think the value of fork_length_mm will be now?\n\n:::\n\n\n**Some initial thoughts on naming things**^[You will soon discover that coding is 90% naming things.]\n\nTheoretically, we can name objects anything we want - but before that gets out of hand let's think about some guidelines for naming objects.\n\n* Make them simple, specific, and not too long (otherwise you will end up with a lot of typing to do and difficulties remembering which object is which).\n* Object names cannot start with a number.\n* R is case sensitive, `fork_length` is not the same as `Fork_Length`.\n* Avoid using dots (`.`) in names. Typically dots are used in function names and also have special meaning (methods) in R.\n* Some names are already taken by fundamental functions (e.g. `if`, `else`, `for`) and cannot be used as names for objects; in general avoid using names that have already been used by other function names.\n* Rule of thumb: nouns for object names, verbs for function names.\n\nUsing a consistent style for naming your objects is part of adopting a consistent styling of your code; this includes things like spacing, how you name objects, and upper/lower case. Clean, consistent code will make following your code a lot easier for yourself and others^[Remember, future you is your most important collaborator.]. \n\n::: {.callout-note}\n\nOne of the criteria for your homework assignments and skills tests is your code style. Next to imitating the style of coding presented in this manual, you can refer to [r4ds (2e) Ch 5](https://r4ds.hadley.nz/workflow-style) for some initial pointers, you can also access a [short style guide here](http://adv-r.had.co.nz/Style.html) and a [more detailed, tidyverse specific style guide here](https://style.tidyverse.org/index.html).\n\n:::\n\n\n## Saving your work\n\nSo far, we have inputed all of our code directly into the `console`. If you scroll up in the `console` you will find that all the commands and results from your current R session are still in the console. Using `Cmd`/`Ctrl` + `L` will clear the entire console.\n\nUh-oh - what if we need to go back over the code we just cleared?\n\nWell, for one if you check the `History` tab in the top right panel you will see that all your commands have been recorded. If you highlight one of them and either click on `To Console` or hit `Enter` it will send it directly to the console.\n\nUsually your history will be saved automatically when you close R/end an R session (unless you have changed the settings) and it will be restored when you open R again. You can use the broom icon to clear your entire history.\n\nUh-oh - now what do we do?\n\nIn general, you should only be typing code directly into the console for quick queries or troubleshooting but since usually we want to be able to revisit and share our work you will want to be able to save your work in an `R script` (`*.R`) or include it in a `quarto` document (`*.qmd`) as a code chunk. For this course we will mostly be operating with `quarto` files (more on that in the next chapter).\n\nYou can open a new `R script` using `Ctrl + Shift + C` or using `File > New File > R Script`. This will open an R script in a new tab in the top left pane.\n\nSave your `R script` using `Cmd`/`Ctrl` + `S` or `File > Save As` - this will open a dialogue box for you to save your `R script` with the file extension `.R`.\n\n`Ctrl` + `Enter` will execute commands directly from the script editor by sending them through to the console. You can use this to run the line of code your cursor is currently in in the script editor or you can highlight a series of lines to execute. You can also run all the code in a script by clicking on the `Run` button.\n\nCreate a new `R script` to keep track of the rest of the things we will learn today.\n\n\n## Using comments\n\nYou can add comments to your `R scripts` using `#`. Essentially, once you type an `#` in a line anything to the right of it will be ignored.\n\nThis is really helpful as it will allow you to comment your script, i.e. you can leave notes and explanations as to what your code is doing for future you and for other collaborators. This is especially helpful if you come back to some of your code after a period of time, if you are sharing your code with others, and when you are debugging code. You will find that as you become more experienced your comments will become shorter and more concise and you might even be tempted to leave them out completely - don't^[To help you build a habit of good commenting practice, commenting your code is a requirement for your homework assignment and skills tests.]!\n\nFor example you might find a comment like this more helpful at the moment:\n\n```{r}\n\n# assign value to new object total length\nfork_length <- 436\n\n```\n\nBut soon you'll find this just as helpful:\n\n```{r}\n\n# total length fish\nfork_length <- 436\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this.\n\nPredict what value of the object `total_length` will be after executing this command.\n\n:::\n\n```{r}\n\nFL <- 436  # total length fish\n\n```\n\n::: {.callout-tip}\n\n## Protip\n\nYou can comment/uncomment multiple lines at once by highlighting the lines you want to comment (or uncomment) and hitting `Ctrl + Shift + C`. This can be useful if you are playing around with code and don't want to delete something but don't want it to be run either.\n\n:::\n\n\n## Functions\n\nWhen we installed `R packages` earlier we mentioned that they are sets of predefined `functions`. These are essentially mini-scripts that automate using specific sets of commands. So instead of having to run multiple lines of code (this can be 10s - 100s of lines code) you *call* the function instead.\n\nEach function usually requires multiple inputs (*arguments*) and once executed return a `value` (though this is not always the case).\n\nFor example the function `round()` can be used to round a number^[This is an excellent example of naming things well!].\n\n```{r}\n\nfork_length_cm <- round(34.8821)\n\n```\n\nIf we print the value of our object we see the following value is returned.\n\n```{r}\n\nfork_length_cm\n\n```\n\nFor this function the input (argument) is a number and the returned value is also a number. This is not always the case, arguments can be numbers, objects, file paths ...\n\nMany functions have set of arguments that alter the way a function operates - these are called `options`. Generally, they have a default value which are used unless specified otherwise by the user.\n\nYou can determine the arguments as function by calling the function `args()`.\n\n```{r}\n\nargs(round)\n\n```\n\nOr you can call up the help page using `?round` or by typing it into the search box in the `help` tab in the lower right panel.\n\nFor example, our `round()` function has an argument called `digits`, we can use this to specify the number of significant digits we want our rounded value to have.\n\n```{r}\n\nround(34.8821, digits = 2)\n\n```\n\nIf you provide the arguments in the exact same order as they are defined you do not have to specify them.\n\n```{r}\n\nround(34.8821, 2)\n\n```\n\nHowever, if you specify the arguments, you can switch their order.\n\n```{r}\n\nround(digits = 2, x = 34.8821)\n\n```\n\n::: {.callout-tip}\n\n## Protip\n\nGood code style is to put the non-optional arguments (frequently the object, file path or value you are using) first and then specify the names of all the optional arguments you are specifying. This provides clarity and makes it easier for yourself and others to follow your code. \n\n:::\n\nOccasionally you might even want to use comments to further specify what each argument is doing or why you are choosing a specific option.\n\n```{r}\n\nround(34.8821,     # number to round\n      digits = 2)  # specify number of significant digits\n\n```\n\n\n## Vectors (data types I)\n\nNow that we've figured out what objects and functions are let's get to know the two data types we will be spending the most time with this semester - `vectors` and data frames (`data.frame`)^[Other data types include lists (`list`), factors (`factor`) matrices (`matrix`),  and arrays (`array`); we'll introduce those later on.].\n\nThe most simple data type in R is the (atomic) `vector` which is a linear vector of a single type. There are six main types -\n\n* `character`: strings or words.\n* `numeric` or `double`: numbers.\n* `integer`: integer numbers (usually indicated as `2L` to distinguish from `numeric`).\n* `logical`: `TRUE` or `FALSE` (i.e. boolean data type).\n* `complex`: complex numbers with real and imaginary parts (we'll leave it at that).\n* `raw`: bitstreams (we won't use those either).\n\nYou can check the data type of any object using `class()`.\n\n```{r}\n\nclass(fork_length)\n\n```\n\nCurrently, our `fork_length` object consists of a single value. The function `c()` (concatenate) will allow us to assign a series of values to an object.\n\n```{r}\n\nfork_length <- c(454, 234, 948, 201)\n\nfork_length\n\n```\n\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nPredict what data type you expect this vector to be.\n\n:::\n\nWe call the same function to create a `character vector`.\n\n```{r}\n\nsharks <- c(\"bullshark\", \"blacktip\", \"scallopedhammerhead\")\n\nclass(sharks)\n\n```\n\nThe quotes around `\"bullshark\"` etc. are essential because they indicate that this is a character. \n\n::: {.callout-tip}\n\n## Protip\n\nIf we do not use quotes, R will assume that we are trying to call an object and you will get an error code along the lines of \"`! object 'bullshark' not found`\".\n\n:::\n\nYou can use `c()` to combine an existing object with additional elements (assuming they are the same data type).\n\n```{r}\n\nspecies <- c(sharks, \"gafftop\")\n\nspecies\n\n```\n\nNext to `class()` there are other helpful functions to inspect the content of a vector. For example `length()` will tell you how many elements are in a particular vector.\n\n```{r}\n\nlength(fork_length)\n\n```\n\nThe function `str()` will give you an overview of the structure of any object and its elements.\n\n```{r}\n\nstr(fork_length)\n\n```\n\nRecall, that an atomic vector is a linear vector of *a single type*. Let's explore what that means by taking a look at what happens if we create atomic vectors where we mix the data types.\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Consider this\n\nDescribe what happens when data types are mixed in a single atomic vector based on the messages generated by the code chunk below to figure out what the rules are in terms of which data type is convered to match the others when they are mixed.\n\n:::\n\n```{r}\n\nnumeric_character <- c(1, 2, 3, \"a\")\nnumeric_logical <- c(1, 2, 3, TRUE)\ncharacter_logical <- c(\"a\", \"b\", \"c\", TRUE)\nwtf <- c(1, 2, 3, \"4\")\n\n```\n\nWe already discovered that we can combine vectors - but can we extract certain components from vectors? Indeed, there are a variety of ways that we can subset vectors.\n\nThe most simple way is using square brackets to indicate which element (or elements) we can't extract. In `R`, indices start at 1.^[This is not the case for all programming languages, e.g. Perl, Python, or C++ start with 0.]\n\n```{r}\n\n# extract second element\nspecies[2]\n\n# extract fourth and second element\nspecies[c(4, 2)]\n\n```\n\nYou can also repeat indices to create a new object with additional elements.\n\n```{r}\n\nspecies_longer <- species[c(2, 2, 4, 3, 4, 4, 1, 1)]\n\nspecies_longer\n\n```\n\nMore frequently, we will want to extract certain elements based on a specific condition (conditional subsetting). \n\nThis is done using a logical vector, here `TRUE` select the element with the same index and `FALSE` will not.\n\n```{r}\n\nfork_length <- c(454, 234, 948, 201)\n\n# use logical vector to subset\nfork_length[c(TRUE, FALSE, TRUE, FALSE)]\n\n```\n\nThis seems like a very impractical option. However, normally we would not create the logical vector by hand as we have done here, rather it will be the output of a function or logical test. For example, we might want to identify fish with a fork length > 300mm.\n\n```{r}\n\n# identify fish with fork length > threshold\nfork_length > 300\n\n```\nThis creates an output the same length as the vector we looked at (`fork_length`) consisting of `TRUE`/`FALSE` statements for each element by comparing the each element of the vector to the condition (`>300`) and determining if the condition is met (the statement is true) or not.\n\nInstead of first creating a vector of `TRUE`/`FALSE` statements can use this condition to subset our vector directly.\n\n```{r}\n\n#  identify true/false of fish with fork length > threshold\nfork_length[c(fork_length > 300)]\n\n```\n\nThere are a series of `boolean expressions`^[Boolean expressions are logical statements that are either true or false; most of them you are probably already familiar with because math] we can use for subsetting vectors.\n\n* `>` and `<` (greater/less than)\n* `=>` and `=<` (equal to or greater/less than)\n* `==` (equal to) and `!=` (is not equal to)\n\n::: {.callout-tip}\n\n## Protip\n\nYou can combine to **boolean expressions** using `&`, (**both** conditions must be met) and `|` (at least one condition must be met).\n\n:::\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give it a whirl\n\nSubset the `fork_length` vector to \n\n* contain only values equal to 234\n* contain all values but 948\n* contain all values larger than 230 but smaller than 900\n* contain all values smaller than 250 or larger that 900\n\n:::\n\nR is set apart from other programming languages because it was designed to analyze data^[some people will argue that it is a 'statistical language' rather than a true programming language ... don't listen to them, they are just jealous of your R skillz!] it has straightforward ways to deal with missing data (`NA` or `na` values) because those are quite common in real world data sets.\n\nLet's create a vector with a missing value.\n\n```{r}\n\ntotal_length <- c(560, NA, 1021, 250)\n\n```\n\nLet's say we want to calculate the mean value.\n\n```{r}\n\nmean(total_length)\n\n```\n\nMost functions will return `NA` when doing operations on objects with missing values. As such, many functions include an argument to omit missing values.\n\n```{r}\n\nmean(total_length, na.rm = TRUE)\n\n```\n\nOther functions that are helpful to deal with missing values are `is.na()`, `na.omit()`, and `complete.cases()`.\n\n::: {.callout-note icon=false}\n\n## {{< fa clipboard-question >}}   Give this a whirl.\n\nSubset the `fork_length` vector to \n\nRun each of these functions on our total_length vector and describe what they do.\"\n\n:::\n\n\n## Data frames (data types II)\n\nRecall that **atomic vectors** are *linear* vectors of a simple type, essentially they are one dimensional. Frequently we will be using data frames (`data.frame`) which you can think of as consisting of several vectors of the same length where each vector becomes a column and the elements are the rows.\n\nLet's create a new object that is a dataframe with three columns containing information on species, fork length, and total length.\n\n```{r}\n\n# combine vectors into data frame\ncatch <- data.frame(species, fork_length, total_length)\n\n```\n\nYou should now see a new object in your `Global Environment` and you will now also see that there are two categories of objects `Data` and `Values`. You will see that the `data.frame` is described as having 4 obs (observations, those are your rows) of 3 variables (those are your columns). If you click on the little blue arrow it will give you additional information on each column - note that because each column is essentially a vector, each one must consist of a single data type which is also indicated.\n\nCalling the `str()` will give you the same information.\n\n```{r}\n\nstr(catch)\n\n```\n\nYou can further inspect the `data.frame` by clicking on the little white box on the right which will open a tab in the top left panel next to your R script. You can also always view a `data.frame` by calling the `View()` function.\n\n```{r}\n#| eval: false\n\nView(catch)\n\n```\n\nThis can be a helpful way to explore your `data.frame`, for example, clicking on the headers will sort the data frame by that column. Usually we won't build or `data.frames` by hand, rather we will read them in from e.g. a tab-delimited text file - but more on that later.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","reference-location":"margin","toc":true,"toc-depth":2,"number-sections":true,"embed-resources":true,"output-file":"03_Rbasics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"citation-location":"margin","fig-cap-location":"margin","tbl-cap-location":"margin","theme":"cosmo","toc-location":"left","code-copy":"hover","anchor-sections":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}